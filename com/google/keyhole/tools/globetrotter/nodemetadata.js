/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.geo_globetrotter_proto_rocktree.NodeMetadata');
goog.provide('proto.geo_globetrotter_proto_rocktree.NodeMetadata.Flags');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geo_globetrotter_proto_rocktree.NodeMetadata.repeatedFields_, null);
};
goog.inherits(proto.geo_globetrotter_proto_rocktree.NodeMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo_globetrotter_proto_rocktree.NodeMetadata.displayName = 'proto.geo_globetrotter_proto_rocktree.NodeMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.geo_globetrotter_proto_rocktree.NodeMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo_globetrotter_proto_rocktree.NodeMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathAndFlags: jspb.Message.getField(msg, 1),
    epoch: jspb.Message.getField(msg, 2),
    bulkMetadataEpoch: jspb.Message.getField(msg, 5),
    orientedBoundingBox: msg.getOrientedBoundingBox_asB64(),
    metersPerTexel: jspb.Message.getOptionalFloatingPointField(msg, 4),
    processingOrientedBoundingBoxList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    imageryEpoch: jspb.Message.getField(msg, 7),
    availableTextureFormats: jspb.Message.getField(msg, 8),
    availableViewDependentTextures: jspb.Message.getField(msg, 9),
    availableViewDependentTextureFormats: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo_globetrotter_proto_rocktree.NodeMetadata}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo_globetrotter_proto_rocktree.NodeMetadata;
  return proto.geo_globetrotter_proto_rocktree.NodeMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo_globetrotter_proto_rocktree.NodeMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo_globetrotter_proto_rocktree.NodeMetadata}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPathAndFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEpoch(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBulkMetadataEpoch(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrientedBoundingBox(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMetersPerTexel(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setProcessingOrientedBoundingBoxList(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImageryEpoch(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvailableTextureFormats(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvailableViewDependentTextures(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvailableViewDependentTextureFormats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo_globetrotter_proto_rocktree.NodeMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo_globetrotter_proto_rocktree.NodeMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getProcessingOrientedBoundingBoxList();
  if (f.length > 0) {
    writer.writePackedDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.Flags = {
  RICH3D_LEAF: 1,
  RICH3D_NODATA: 2,
  LEAF: 4,
  NODATA: 8,
  USE_IMAGERY_EPOCH: 16
};

/**
 * optional uint32 path_and_flags = 1;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getPathAndFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setPathAndFlags = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearPathAndFlags = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasPathAndFlags = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 epoch = 2;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setEpoch = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearEpoch = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasEpoch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 bulk_metadata_epoch = 5;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getBulkMetadataEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setBulkMetadataEpoch = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearBulkMetadataEpoch = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasBulkMetadataEpoch = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes oriented_bounding_box = 3;
 * @return {string}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getOrientedBoundingBox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes oriented_bounding_box = 3;
 * This is a type-conversion wrapper around `getOrientedBoundingBox()`
 * @return {string}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getOrientedBoundingBox_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrientedBoundingBox()));
};


/**
 * optional bytes oriented_bounding_box = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrientedBoundingBox()`
 * @return {!Uint8Array}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getOrientedBoundingBox_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrientedBoundingBox()));
};


/** @param {!(string|Uint8Array)} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setOrientedBoundingBox = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearOrientedBoundingBox = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasOrientedBoundingBox = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float meters_per_texel = 4;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getMetersPerTexel = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setMetersPerTexel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearMetersPerTexel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasMetersPerTexel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated double processing_oriented_bounding_box = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getProcessingOrientedBoundingBoxList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array.<number>} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setProcessingOrientedBoundingBoxList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.addProcessingOrientedBoundingBox = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearProcessingOrientedBoundingBoxList = function() {
  this.setProcessingOrientedBoundingBoxList([]);
};


/**
 * optional uint32 imagery_epoch = 7;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getImageryEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setImageryEpoch = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearImageryEpoch = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasImageryEpoch = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 available_texture_formats = 8;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getAvailableTextureFormats = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setAvailableTextureFormats = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearAvailableTextureFormats = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasAvailableTextureFormats = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 available_view_dependent_textures = 9;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getAvailableViewDependentTextures = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setAvailableViewDependentTextures = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearAvailableViewDependentTextures = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasAvailableViewDependentTextures = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 available_view_dependent_texture_formats = 10;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.getAvailableViewDependentTextureFormats = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.setAvailableViewDependentTextureFormats = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.clearAvailableViewDependentTextureFormats = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeMetadata.prototype.hasAvailableViewDependentTextureFormats = function() {
  return jspb.Message.getField(this, 10) != null;
};


