/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.SearchTabProto');
goog.provide('proto.keyhole.dbroot.SearchTabProto.InputBoxInfo');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.keyhole.dbroot.RequirementProto');
goog.require('proto.keyhole.dbroot.StringIdOrValueProto');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.SearchTabProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.dbroot.SearchTabProto.repeatedFields_, null);
};
goog.inherits(proto.keyhole.dbroot.SearchTabProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.SearchTabProto.displayName = 'proto.keyhole.dbroot.SearchTabProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.dbroot.SearchTabProto.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.SearchTabProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.SearchTabProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.SearchTabProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    isVisible: jspb.Message.getField(msg, 1),
    tabLabel: (f = msg.getTabLabel()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    baseUrl: jspb.Message.getField(msg, 3),
    viewportPrefix: jspb.Message.getField(msg, 4),
    inputBoxList: jspb.Message.toObjectList(msg.getInputBoxList(),
    proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.toObject, includeInstance),
    requirement: (f = msg.getRequirement()) && proto.keyhole.dbroot.RequirementProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.SearchTabProto}
 */
proto.keyhole.dbroot.SearchTabProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.SearchTabProto;
  return proto.keyhole.dbroot.SearchTabProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.SearchTabProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.SearchTabProto}
 */
proto.keyhole.dbroot.SearchTabProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVisible(value);
      break;
    case 2:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setTabLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setViewportPrefix(value);
      break;
    case 5:
      var value = new proto.keyhole.dbroot.SearchTabProto.InputBoxInfo;
      reader.readMessage(value,proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.deserializeBinaryFromReader);
      msg.addInputBox(value);
      break;
    case 6:
      var value = new proto.keyhole.dbroot.RequirementProto;
      reader.readMessage(value,proto.keyhole.dbroot.RequirementProto.deserializeBinaryFromReader);
      msg.setRequirement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.SearchTabProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.SearchTabProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.SearchTabProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTabLabel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInputBoxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.serializeBinaryToWriter
    );
  }
  f = message.getRequirement();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.keyhole.dbroot.RequirementProto.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.SearchTabProto.InputBoxInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.displayName = 'proto.keyhole.dbroot.SearchTabProto.InputBoxInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: (f = msg.getLabel()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    queryVerb: jspb.Message.getField(msg, 2),
    queryPrepend: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.SearchTabProto.InputBoxInfo;
  return proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryVerb(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryPrepend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required StringIdOrValueProto label = 1;
 * @return {!proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.getLabel = function() {
  return /** @type{!proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 1, 1));
};


/** @param {!proto.keyhole.dbroot.StringIdOrValueProto} value */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.setLabel = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.clearLabel = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string query_verb = 2;
 * @return {string}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.getQueryVerb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.setQueryVerb = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.clearQueryVerb = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.hasQueryVerb = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string query_prepend = 3;
 * @return {string}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.getQueryPrepend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.setQueryPrepend = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.clearQueryPrepend = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.InputBoxInfo.prototype.hasQueryPrepend = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bool is_visible = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.getIsVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.SearchTabProto.prototype.setIsVisible = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.SearchTabProto.prototype.clearIsVisible = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.hasIsVisible = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringIdOrValueProto tab_label = 2;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.getTabLabel = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 2));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.SearchTabProto.prototype.setTabLabel = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.keyhole.dbroot.SearchTabProto.prototype.clearTabLabel = function() {
  this.setTabLabel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.hasTabLabel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string base_url = 3;
 * @return {string}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.getBaseUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.SearchTabProto.prototype.setBaseUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.SearchTabProto.prototype.clearBaseUrl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.hasBaseUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string viewport_prefix = 4;
 * @return {string}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.getViewportPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.SearchTabProto.prototype.setViewportPrefix = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.SearchTabProto.prototype.clearViewportPrefix = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.hasViewportPrefix = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated InputBoxInfo input_box = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo>}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.getInputBoxList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.SearchTabProto.InputBoxInfo, 5));
};


/** @param {!Array.<!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo>} value */
proto.keyhole.dbroot.SearchTabProto.prototype.setInputBoxList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.SearchTabProto.InputBoxInfo}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.addInputBox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.keyhole.dbroot.SearchTabProto.InputBoxInfo, opt_index);
};


proto.keyhole.dbroot.SearchTabProto.prototype.clearInputBoxList = function() {
  this.setInputBoxList([]);
};


/**
 * optional RequirementProto requirement = 6;
 * @return {?proto.keyhole.dbroot.RequirementProto}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.getRequirement = function() {
  return /** @type{?proto.keyhole.dbroot.RequirementProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.RequirementProto, 6));
};


/** @param {?proto.keyhole.dbroot.RequirementProto|undefined} value */
proto.keyhole.dbroot.SearchTabProto.prototype.setRequirement = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.keyhole.dbroot.SearchTabProto.prototype.clearRequirement = function() {
  this.setRequirement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.SearchTabProto.prototype.hasRequirement = function() {
  return jspb.Message.getField(this, 6) != null;
};


