/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.FetchingOptionsProto');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.FetchingOptionsProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.FetchingOptionsProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.FetchingOptionsProto.displayName = 'proto.keyhole.dbroot.FetchingOptionsProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.FetchingOptionsProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.FetchingOptionsProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.FetchingOptionsProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxRequestsPerQuery: jspb.Message.getFieldWithDefault(msg, 1, 1),
    forceMaxRequestsPerQuery: jspb.Message.getField(msg, 12),
    sortBatches: jspb.Message.getField(msg, 13),
    maxDrawable: jspb.Message.getFieldWithDefault(msg, 2, 2),
    maxImagery: jspb.Message.getFieldWithDefault(msg, 3, 2),
    maxTerrain: jspb.Message.getFieldWithDefault(msg, 4, 5),
    maxQuadtree: jspb.Message.getFieldWithDefault(msg, 5, 5),
    maxDioramaMetadata: jspb.Message.getFieldWithDefault(msg, 6, 1),
    maxDioramaData: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxConsumerFetchRatio: +jspb.Message.getFieldWithDefault(msg, 8, 1.0),
    maxProEcFetchRatio: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    safeOverallQps: jspb.Message.getOptionalFloatingPointField(msg, 10),
    safeImageryQps: jspb.Message.getOptionalFloatingPointField(msg, 11),
    domainsForHttps: jspb.Message.getFieldWithDefault(msg, 14, "google.com gstatic.com"),
    hostsForHttp: jspb.Message.getField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.FetchingOptionsProto}
 */
proto.keyhole.dbroot.FetchingOptionsProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.FetchingOptionsProto;
  return proto.keyhole.dbroot.FetchingOptionsProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.FetchingOptionsProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.FetchingOptionsProto}
 */
proto.keyhole.dbroot.FetchingOptionsProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRequestsPerQuery(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceMaxRequestsPerQuery(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSortBatches(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxDrawable(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxImagery(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxTerrain(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxQuadtree(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxDioramaMetadata(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxDioramaData(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxConsumerFetchRatio(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxProEcFetchRatio(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSafeOverallQps(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSafeImageryQps(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomainsForHttps(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostsForHttp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.FetchingOptionsProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.FetchingOptionsProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.FetchingOptionsProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional int32 max_requests_per_query = 1;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxRequestsPerQuery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxRequestsPerQuery = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxRequestsPerQuery = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxRequestsPerQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool force_max_requests_per_query = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getForceMaxRequestsPerQuery = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setForceMaxRequestsPerQuery = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearForceMaxRequestsPerQuery = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasForceMaxRequestsPerQuery = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool sort_batches = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getSortBatches = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setSortBatches = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearSortBatches = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasSortBatches = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 max_drawable = 2;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxDrawable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 2));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxDrawable = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxDrawable = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxDrawable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 max_imagery = 3;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxImagery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 2));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxImagery = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxImagery = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxImagery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 max_terrain = 4;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxTerrain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 5));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxTerrain = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxTerrain = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxTerrain = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 max_quadtree = 5;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxQuadtree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 5));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxQuadtree = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxQuadtree = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxQuadtree = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 max_diorama_metadata = 6;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxDioramaMetadata = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxDioramaMetadata = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxDioramaMetadata = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxDioramaMetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 max_diorama_data = 7;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxDioramaData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxDioramaData = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxDioramaData = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxDioramaData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float max_consumer_fetch_ratio = 8;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxConsumerFetchRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 1.0));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxConsumerFetchRatio = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxConsumerFetchRatio = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxConsumerFetchRatio = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float max_pro_ec_fetch_ratio = 9;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getMaxProEcFetchRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setMaxProEcFetchRatio = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearMaxProEcFetchRatio = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasMaxProEcFetchRatio = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float safe_overall_qps = 10;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getSafeOverallQps = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setSafeOverallQps = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearSafeOverallQps = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasSafeOverallQps = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float safe_imagery_qps = 11;
 * @return {number}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getSafeImageryQps = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setSafeImageryQps = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearSafeImageryQps = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasSafeImageryQps = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string domains_for_https = 14;
 * @return {string}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getDomainsForHttps = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, "google.com gstatic.com"));
};


/** @param {string} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setDomainsForHttps = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearDomainsForHttps = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasDomainsForHttps = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string hosts_for_http = 15;
 * @return {string}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.getHostsForHttp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.setHostsForHttp = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.keyhole.dbroot.FetchingOptionsProto.prototype.clearHostsForHttp = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.FetchingOptionsProto.prototype.hasHostsForHttp = function() {
  return jspb.Message.getField(this, 15) != null;
};


