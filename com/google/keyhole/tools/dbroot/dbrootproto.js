/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.DbRootProto');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.keyhole.dbroot.DatabaseVersionProto');
goog.require('proto.keyhole.dbroot.DbRootRefProto');
goog.require('proto.keyhole.dbroot.EndSnippetProto');
goog.require('proto.keyhole.dbroot.NestedFeatureProto');
goog.require('proto.keyhole.dbroot.ProviderInfoProto');
goog.require('proto.keyhole.dbroot.StringEntryProto');
goog.require('proto.keyhole.dbroot.StringIdOrValueProto');
goog.require('proto.keyhole.dbroot.StyleAttributeProto');
goog.require('proto.keyhole.dbroot.StyleMapProto');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.DbRootProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.dbroot.DbRootProto.repeatedFields_, null);
};
goog.inherits(proto.keyhole.dbroot.DbRootProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.DbRootProto.displayName = 'proto.keyhole.dbroot.DbRootProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.dbroot.DbRootProto.repeatedFields_ = [3,4,5,6,8,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.DbRootProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.DbRootProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.DbRootProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.DbRootProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    databaseName: (f = msg.getDatabaseName()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    imageryPresent: jspb.Message.getFieldWithDefault(msg, 1, true),
    protoImagery: jspb.Message.getFieldWithDefault(msg, 14, false),
    terrainPresent: jspb.Message.getFieldWithDefault(msg, 2, false),
    providerInfoList: jspb.Message.toObjectList(msg.getProviderInfoList(),
    proto.keyhole.dbroot.ProviderInfoProto.toObject, includeInstance),
    nestedFeatureList: jspb.Message.toObjectList(msg.getNestedFeatureList(),
    proto.keyhole.dbroot.NestedFeatureProto.toObject, includeInstance),
    styleAttributeList: jspb.Message.toObjectList(msg.getStyleAttributeList(),
    proto.keyhole.dbroot.StyleAttributeProto.toObject, includeInstance),
    styleMapList: jspb.Message.toObjectList(msg.getStyleMapList(),
    proto.keyhole.dbroot.StyleMapProto.toObject, includeInstance),
    endSnippet: (f = msg.getEndSnippet()) && proto.keyhole.dbroot.EndSnippetProto.toObject(includeInstance, f),
    translationEntryList: jspb.Message.toObjectList(msg.getTranslationEntryList(),
    proto.keyhole.dbroot.StringEntryProto.toObject, includeInstance),
    language: jspb.Message.getFieldWithDefault(msg, 9, "en"),
    version: jspb.Message.getFieldWithDefault(msg, 10, 5),
    dbrootReferenceList: jspb.Message.toObjectList(msg.getDbrootReferenceList(),
    proto.keyhole.dbroot.DbRootRefProto.toObject, includeInstance),
    databaseVersion: (f = msg.getDatabaseVersion()) && proto.keyhole.dbroot.DatabaseVersionProto.toObject(includeInstance, f),
    refreshTimeout: jspb.Message.getField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.DbRootProto}
 */
proto.keyhole.dbroot.DbRootProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.DbRootProto;
  return proto.keyhole.dbroot.DbRootProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.DbRootProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.DbRootProto}
 */
proto.keyhole.dbroot.DbRootProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 15:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setDatabaseName(value);
      break;
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImageryPresent(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProtoImagery(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTerrainPresent(value);
      break;
    case 3:
      var value = new proto.keyhole.dbroot.ProviderInfoProto;
      reader.readMessage(value,proto.keyhole.dbroot.ProviderInfoProto.deserializeBinaryFromReader);
      msg.addProviderInfo(value);
      break;
    case 4:
      var value = new proto.keyhole.dbroot.NestedFeatureProto;
      reader.readMessage(value,proto.keyhole.dbroot.NestedFeatureProto.deserializeBinaryFromReader);
      msg.addNestedFeature(value);
      break;
    case 5:
      var value = new proto.keyhole.dbroot.StyleAttributeProto;
      reader.readMessage(value,proto.keyhole.dbroot.StyleAttributeProto.deserializeBinaryFromReader);
      msg.addStyleAttribute(value);
      break;
    case 6:
      var value = new proto.keyhole.dbroot.StyleMapProto;
      reader.readMessage(value,proto.keyhole.dbroot.StyleMapProto.deserializeBinaryFromReader);
      msg.addStyleMap(value);
      break;
    case 7:
      var value = new proto.keyhole.dbroot.EndSnippetProto;
      reader.readMessage(value,proto.keyhole.dbroot.EndSnippetProto.deserializeBinaryFromReader);
      msg.setEndSnippet(value);
      break;
    case 8:
      var value = new proto.keyhole.dbroot.StringEntryProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringEntryProto.deserializeBinaryFromReader);
      msg.addTranslationEntry(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 11:
      var value = new proto.keyhole.dbroot.DbRootRefProto;
      reader.readMessage(value,proto.keyhole.dbroot.DbRootRefProto.deserializeBinaryFromReader);
      msg.addDbrootReference(value);
      break;
    case 13:
      var value = new proto.keyhole.dbroot.DatabaseVersionProto;
      reader.readMessage(value,proto.keyhole.dbroot.DatabaseVersionProto.deserializeBinaryFromReader);
      msg.setDatabaseVersion(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefreshTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.DbRootProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.DbRootProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.DbRootProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.DbRootProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabaseName();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getProviderInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.keyhole.dbroot.ProviderInfoProto.serializeBinaryToWriter
    );
  }
  f = message.getNestedFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.keyhole.dbroot.NestedFeatureProto.serializeBinaryToWriter
    );
  }
  f = message.getStyleAttributeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.keyhole.dbroot.StyleAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getStyleMapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.keyhole.dbroot.StyleMapProto.serializeBinaryToWriter
    );
  }
  f = message.getEndSnippet();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.keyhole.dbroot.EndSnippetProto.serializeBinaryToWriter
    );
  }
  f = message.getTranslationEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.keyhole.dbroot.StringEntryProto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getDbrootReferenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.keyhole.dbroot.DbRootRefProto.serializeBinaryToWriter
    );
  }
  f = message.getDatabaseVersion();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.keyhole.dbroot.DatabaseVersionProto.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional StringIdOrValueProto database_name = 15;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getDatabaseName = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 15));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.DbRootProto.prototype.setDatabaseName = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearDatabaseName = function() {
  this.setDatabaseName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasDatabaseName = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool imagery_present = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getImageryPresent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.DbRootProto.prototype.setImageryPresent = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearImageryPresent = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasImageryPresent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool proto_imagery = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getProtoImagery = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.DbRootProto.prototype.setProtoImagery = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearProtoImagery = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasProtoImagery = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool terrain_present = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getTerrainPresent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.DbRootProto.prototype.setTerrainPresent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearTerrainPresent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasTerrainPresent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ProviderInfoProto provider_info = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.ProviderInfoProto>}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getProviderInfoList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.ProviderInfoProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.ProviderInfoProto, 3));
};


/** @param {!Array.<!proto.keyhole.dbroot.ProviderInfoProto>} value */
proto.keyhole.dbroot.DbRootProto.prototype.setProviderInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.keyhole.dbroot.ProviderInfoProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.ProviderInfoProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.addProviderInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.keyhole.dbroot.ProviderInfoProto, opt_index);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearProviderInfoList = function() {
  this.setProviderInfoList([]);
};


/**
 * repeated NestedFeatureProto nested_feature = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.NestedFeatureProto>}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getNestedFeatureList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.NestedFeatureProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.NestedFeatureProto, 4));
};


/** @param {!Array.<!proto.keyhole.dbroot.NestedFeatureProto>} value */
proto.keyhole.dbroot.DbRootProto.prototype.setNestedFeatureList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.keyhole.dbroot.NestedFeatureProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.NestedFeatureProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.addNestedFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.keyhole.dbroot.NestedFeatureProto, opt_index);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearNestedFeatureList = function() {
  this.setNestedFeatureList([]);
};


/**
 * repeated StyleAttributeProto style_attribute = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.StyleAttributeProto>}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getStyleAttributeList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.StyleAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.StyleAttributeProto, 5));
};


/** @param {!Array.<!proto.keyhole.dbroot.StyleAttributeProto>} value */
proto.keyhole.dbroot.DbRootProto.prototype.setStyleAttributeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.keyhole.dbroot.StyleAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.StyleAttributeProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.addStyleAttribute = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.keyhole.dbroot.StyleAttributeProto, opt_index);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearStyleAttributeList = function() {
  this.setStyleAttributeList([]);
};


/**
 * repeated StyleMapProto style_map = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.StyleMapProto>}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getStyleMapList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.StyleMapProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.StyleMapProto, 6));
};


/** @param {!Array.<!proto.keyhole.dbroot.StyleMapProto>} value */
proto.keyhole.dbroot.DbRootProto.prototype.setStyleMapList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.keyhole.dbroot.StyleMapProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.StyleMapProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.addStyleMap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.keyhole.dbroot.StyleMapProto, opt_index);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearStyleMapList = function() {
  this.setStyleMapList([]);
};


/**
 * optional EndSnippetProto end_snippet = 7;
 * @return {?proto.keyhole.dbroot.EndSnippetProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getEndSnippet = function() {
  return /** @type{?proto.keyhole.dbroot.EndSnippetProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.EndSnippetProto, 7));
};


/** @param {?proto.keyhole.dbroot.EndSnippetProto|undefined} value */
proto.keyhole.dbroot.DbRootProto.prototype.setEndSnippet = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearEndSnippet = function() {
  this.setEndSnippet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasEndSnippet = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated StringEntryProto translation_entry = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.StringEntryProto>}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getTranslationEntryList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.StringEntryProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.StringEntryProto, 8));
};


/** @param {!Array.<!proto.keyhole.dbroot.StringEntryProto>} value */
proto.keyhole.dbroot.DbRootProto.prototype.setTranslationEntryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.keyhole.dbroot.StringEntryProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.StringEntryProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.addTranslationEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.keyhole.dbroot.StringEntryProto, opt_index);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearTranslationEntryList = function() {
  this.setTranslationEntryList([]);
};


/**
 * optional string language = 9;
 * @return {string}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "en"));
};


/** @param {string} value */
proto.keyhole.dbroot.DbRootProto.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearLanguage = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasLanguage = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 version = 10;
 * @return {number}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 5));
};


/** @param {number} value */
proto.keyhole.dbroot.DbRootProto.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearVersion = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated DbRootRefProto dbroot_reference = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.DbRootRefProto>}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getDbrootReferenceList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.DbRootRefProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.DbRootRefProto, 11));
};


/** @param {!Array.<!proto.keyhole.dbroot.DbRootRefProto>} value */
proto.keyhole.dbroot.DbRootProto.prototype.setDbrootReferenceList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.keyhole.dbroot.DbRootRefProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.DbRootRefProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.addDbrootReference = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.keyhole.dbroot.DbRootRefProto, opt_index);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearDbrootReferenceList = function() {
  this.setDbrootReferenceList([]);
};


/**
 * optional DatabaseVersionProto database_version = 13;
 * @return {?proto.keyhole.dbroot.DatabaseVersionProto}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getDatabaseVersion = function() {
  return /** @type{?proto.keyhole.dbroot.DatabaseVersionProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.DatabaseVersionProto, 13));
};


/** @param {?proto.keyhole.dbroot.DatabaseVersionProto|undefined} value */
proto.keyhole.dbroot.DbRootProto.prototype.setDatabaseVersion = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearDatabaseVersion = function() {
  this.setDatabaseVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasDatabaseVersion = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 refresh_timeout = 16;
 * @return {number}
 */
proto.keyhole.dbroot.DbRootProto.prototype.getRefreshTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.DbRootProto.prototype.setRefreshTimeout = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.keyhole.dbroot.DbRootProto.prototype.clearRefreshTimeout = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.DbRootProto.prototype.hasRefreshTimeout = function() {
  return jspb.Message.getField(this, 16) != null;
};


