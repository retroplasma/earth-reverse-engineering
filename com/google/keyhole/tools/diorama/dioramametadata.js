/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.DioramaMetadata');
goog.provide('proto.keyhole.DioramaMetadata.DataPacket');
goog.provide('proto.keyhole.DioramaMetadata.Object');
goog.provide('proto.keyhole.DioramaMetadata.ObjectFlags');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.DioramaMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.DioramaMetadata.repeatedFields_, null);
};
goog.inherits(proto.keyhole.DioramaMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.DioramaMetadata.displayName = 'proto.keyhole.DioramaMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.DioramaMetadata.repeatedFields_ = [16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.DioramaMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.DioramaMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.DioramaMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.DioramaMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxAbsoluteAltitude: jspb.Message.getField(msg, 14),
    maxRelativeAltitude: jspb.Message.getField(msg, 15),
    providerId: jspb.Message.getField(msg, 19),
    objectList: jspb.Message.toObjectList(msg.getObjectList(),
    proto.keyhole.DioramaMetadata.Object.toObject, includeInstance),
    dataPacketList: jspb.Message.toObjectList(msg.getDataPacketList(),
    proto.keyhole.DioramaMetadata.DataPacket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.DioramaMetadata}
 */
proto.keyhole.DioramaMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.DioramaMetadata;
  return proto.keyhole.DioramaMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.DioramaMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.DioramaMetadata}
 */
proto.keyhole.DioramaMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxAbsoluteAltitude(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRelativeAltitude(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProviderId(value);
      break;
    case 16:
      var value = new proto.keyhole.DioramaMetadata.Object;
      reader.readGroup(16, value,proto.keyhole.DioramaMetadata.Object.deserializeBinaryFromReader);
      msg.addObject(value);
      break;
    case 17:
      var value = new proto.keyhole.DioramaMetadata.DataPacket;
      reader.readGroup(17, value,proto.keyhole.DioramaMetadata.DataPacket.deserializeBinaryFromReader);
      msg.addDataPacket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.DioramaMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.DioramaMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.DioramaMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getObjectList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      16,
      f,
      proto.keyhole.DioramaMetadata.Object.serializeBinaryToWriter
    );
  }
  f = message.getDataPacketList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      17,
      f,
      proto.keyhole.DioramaMetadata.DataPacket.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.keyhole.DioramaMetadata.ObjectFlags = {
  IS_GEOMETRY: 4,
  NORTH: 0,
  SOUTH: 1,
  EAST: 2,
  WEST: 3,
  OWNER_DIRECTION_MASK: 3,
  IS_GROUP: 8,
  LOD_PARENT_HERE: 16,
  IS_INSTANCE: 32
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.DioramaMetadata.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.DioramaMetadata.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.DioramaMetadata.Object.displayName = 'proto.keyhole.DioramaMetadata.Object';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.DioramaMetadata.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.DioramaMetadata.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.DioramaMetadata.Object} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.DioramaMetadata.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: jspb.Message.getField(msg, -15),
    lodParent: jspb.Message.getField(msg, -14),
    lodParentTile: jspb.Message.getField(msg, 2),
    idAtSource: jspb.Message.getField(msg, -13),
    offsetToSource: jspb.Message.getField(msg, -12),
    absoluteSource: jspb.Message.getField(msg, -11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.DioramaMetadata.Object}
 */
proto.keyhole.DioramaMetadata.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.DioramaMetadata.Object;
  return proto.keyhole.DioramaMetadata.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.DioramaMetadata.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.DioramaMetadata.Object}
 */
proto.keyhole.DioramaMetadata.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLodParent(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setLodParentTile(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdAtSource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffsetToSource(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setAbsoluteSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaMetadata.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.DioramaMetadata.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.DioramaMetadata.Object} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.DioramaMetadata.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, -15));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -14));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -13));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -12));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -11));
  if (f != null) {
    writer.writeFixed64(
      5,
      f
    );
  }
};


/**
 * optional int32 flags = 1;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.Object.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -15, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.Object.prototype.setFlags = function(value) {
  jspb.Message.setField(this, -15, value);
};


proto.keyhole.DioramaMetadata.Object.prototype.clearFlags = function() {
  jspb.Message.setField(this, -15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.Object.prototype.hasFlags = function() {
  return jspb.Message.getField(this, -15) != null;
};


/**
 * optional int32 lod_parent = 2;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.Object.prototype.getLodParent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -14, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.Object.prototype.setLodParent = function(value) {
  jspb.Message.setField(this, -14, value);
};


proto.keyhole.DioramaMetadata.Object.prototype.clearLodParent = function() {
  jspb.Message.setField(this, -14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.Object.prototype.hasLodParent = function() {
  return jspb.Message.getField(this, -14) != null;
};


/**
 * optional fixed64 lod_parent_tile = 18;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.Object.prototype.getLodParentTile = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.Object.prototype.setLodParentTile = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.DioramaMetadata.Object.prototype.clearLodParentTile = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.Object.prototype.hasLodParentTile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 id_at_source = 3;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.Object.prototype.getIdAtSource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -13, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.Object.prototype.setIdAtSource = function(value) {
  jspb.Message.setField(this, -13, value);
};


proto.keyhole.DioramaMetadata.Object.prototype.clearIdAtSource = function() {
  jspb.Message.setField(this, -13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.Object.prototype.hasIdAtSource = function() {
  return jspb.Message.getField(this, -13) != null;
};


/**
 * optional int32 offset_to_source = 4;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.Object.prototype.getOffsetToSource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -12, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.Object.prototype.setOffsetToSource = function(value) {
  jspb.Message.setField(this, -12, value);
};


proto.keyhole.DioramaMetadata.Object.prototype.clearOffsetToSource = function() {
  jspb.Message.setField(this, -12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.Object.prototype.hasOffsetToSource = function() {
  return jspb.Message.getField(this, -12) != null;
};


/**
 * optional fixed64 absolute_source = 5;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.Object.prototype.getAbsoluteSource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -11, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.Object.prototype.setAbsoluteSource = function(value) {
  jspb.Message.setField(this, -11, value);
};


proto.keyhole.DioramaMetadata.Object.prototype.clearAbsoluteSource = function() {
  jspb.Message.setField(this, -11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.Object.prototype.hasAbsoluteSource = function() {
  return jspb.Message.getField(this, -11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.DioramaMetadata.DataPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.DioramaMetadata.DataPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.DioramaMetadata.DataPacket.displayName = 'proto.keyhole.DioramaMetadata.DataPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.DioramaMetadata.DataPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.DioramaMetadata.DataPacket} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.DioramaMetadata.DataPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    numObjects: jspb.Message.getField(msg, -9),
    maxAltitude: jspb.Message.getField(msg, -8),
    minAltitude: jspb.Message.getField(msg, -7),
    version: jspb.Message.getField(msg, -6),
    maxAbsoluteAltitude: jspb.Message.getField(msg, -5),
    minAbsoluteAltitude: jspb.Message.getField(msg, -4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.DioramaMetadata.DataPacket}
 */
proto.keyhole.DioramaMetadata.DataPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.DioramaMetadata.DataPacket;
  return proto.keyhole.DioramaMetadata.DataPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.DioramaMetadata.DataPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.DioramaMetadata.DataPacket}
 */
proto.keyhole.DioramaMetadata.DataPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumObjects(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxAltitude(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinAltitude(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxAbsoluteAltitude(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinAbsoluteAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.DioramaMetadata.DataPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.DioramaMetadata.DataPacket} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.DioramaMetadata.DataPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, -9));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -8));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -7));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -6));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -5));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -4));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional int32 num_objects = 8;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.getNumObjects = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -9, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.DataPacket.prototype.setNumObjects = function(value) {
  jspb.Message.setField(this, -9, value);
};


proto.keyhole.DioramaMetadata.DataPacket.prototype.clearNumObjects = function() {
  jspb.Message.setField(this, -9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.hasNumObjects = function() {
  return jspb.Message.getField(this, -9) != null;
};


/**
 * required int32 max_altitude = 9;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.getMaxAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -8, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.DataPacket.prototype.setMaxAltitude = function(value) {
  jspb.Message.setField(this, -8, value);
};


proto.keyhole.DioramaMetadata.DataPacket.prototype.clearMaxAltitude = function() {
  jspb.Message.setField(this, -8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.hasMaxAltitude = function() {
  return jspb.Message.getField(this, -8) != null;
};


/**
 * optional int32 min_altitude = 10;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.getMinAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -7, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.DataPacket.prototype.setMinAltitude = function(value) {
  jspb.Message.setField(this, -7, value);
};


proto.keyhole.DioramaMetadata.DataPacket.prototype.clearMinAltitude = function() {
  jspb.Message.setField(this, -7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.hasMinAltitude = function() {
  return jspb.Message.getField(this, -7) != null;
};


/**
 * required int32 version = 11;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -6, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.DataPacket.prototype.setVersion = function(value) {
  jspb.Message.setField(this, -6, value);
};


proto.keyhole.DioramaMetadata.DataPacket.prototype.clearVersion = function() {
  jspb.Message.setField(this, -6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.hasVersion = function() {
  return jspb.Message.getField(this, -6) != null;
};


/**
 * optional int32 max_absolute_altitude = 12;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.getMaxAbsoluteAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -5, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.DataPacket.prototype.setMaxAbsoluteAltitude = function(value) {
  jspb.Message.setField(this, -5, value);
};


proto.keyhole.DioramaMetadata.DataPacket.prototype.clearMaxAbsoluteAltitude = function() {
  jspb.Message.setField(this, -5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.hasMaxAbsoluteAltitude = function() {
  return jspb.Message.getField(this, -5) != null;
};


/**
 * optional int32 min_absolute_altitude = 13;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.getMinAbsoluteAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -4, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.DataPacket.prototype.setMinAbsoluteAltitude = function(value) {
  jspb.Message.setField(this, -4, value);
};


proto.keyhole.DioramaMetadata.DataPacket.prototype.clearMinAbsoluteAltitude = function() {
  jspb.Message.setField(this, -4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.DataPacket.prototype.hasMinAbsoluteAltitude = function() {
  return jspb.Message.getField(this, -4) != null;
};


/**
 * optional int32 max_absolute_altitude = 14;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.prototype.getMaxAbsoluteAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.prototype.setMaxAbsoluteAltitude = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.keyhole.DioramaMetadata.prototype.clearMaxAbsoluteAltitude = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.prototype.hasMaxAbsoluteAltitude = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 max_relative_altitude = 15;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.prototype.getMaxRelativeAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.prototype.setMaxRelativeAltitude = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.keyhole.DioramaMetadata.prototype.clearMaxRelativeAltitude = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.prototype.hasMaxRelativeAltitude = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 provider_id = 19;
 * @return {number}
 */
proto.keyhole.DioramaMetadata.prototype.getProviderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.keyhole.DioramaMetadata.prototype.setProviderId = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.keyhole.DioramaMetadata.prototype.clearProviderId = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaMetadata.prototype.hasProviderId = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * repeated group Object = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.DioramaMetadata.Object>}
 */
proto.keyhole.DioramaMetadata.prototype.getObjectList = function() {
  return /** @type{!Array.<!proto.keyhole.DioramaMetadata.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.DioramaMetadata.Object, 16));
};


/** @param {!Array.<!proto.keyhole.DioramaMetadata.Object>} value */
proto.keyhole.DioramaMetadata.prototype.setObjectList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.keyhole.DioramaMetadata.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.DioramaMetadata.Object}
 */
proto.keyhole.DioramaMetadata.prototype.addObject = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.keyhole.DioramaMetadata.Object, opt_index);
};


proto.keyhole.DioramaMetadata.prototype.clearObjectList = function() {
  this.setObjectList([]);
};


/**
 * repeated group DataPacket = 17;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.DioramaMetadata.DataPacket>}
 */
proto.keyhole.DioramaMetadata.prototype.getDataPacketList = function() {
  return /** @type{!Array.<!proto.keyhole.DioramaMetadata.DataPacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.DioramaMetadata.DataPacket, 17));
};


/** @param {!Array.<!proto.keyhole.DioramaMetadata.DataPacket>} value */
proto.keyhole.DioramaMetadata.prototype.setDataPacketList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.keyhole.DioramaMetadata.DataPacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.DioramaMetadata.DataPacket}
 */
proto.keyhole.DioramaMetadata.prototype.addDataPacket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.keyhole.DioramaMetadata.DataPacket, opt_index);
};


proto.keyhole.DioramaMetadata.prototype.clearDataPacketList = function() {
  this.setDataPacketList([]);
};


