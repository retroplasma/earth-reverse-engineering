/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.ClientOptionsProto');
goog.provide('proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions');
goog.provide('proto.keyhole.dbroot.ClientOptionsProto.MapsOptions');
goog.provide('proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions');
goog.provide('proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping');
goog.provide('proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.WeatherType');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.ClientOptionsProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.ClientOptionsProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.ClientOptionsProto.displayName = 'proto.keyhole.dbroot.ClientOptionsProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.ClientOptionsProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.ClientOptionsProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    disableDiskCache: jspb.Message.getField(msg, 1),
    disableEmbeddedBrowserVista: jspb.Message.getField(msg, 2),
    drawAtmosphere: jspb.Message.getFieldWithDefault(msg, 3, true),
    drawStars: jspb.Message.getFieldWithDefault(msg, 4, true),
    shaderFilePrefix: jspb.Message.getField(msg, 5),
    useProtobufQuadtreePackets: jspb.Message.getField(msg, 6),
    useExtendedCopyrightIds: jspb.Message.getFieldWithDefault(msg, 7, true),
    precipitationsOptions: (f = msg.getPrecipitationsOptions()) && proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.toObject(includeInstance, f),
    captureOptions: (f = msg.getCaptureOptions()) && proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.toObject(includeInstance, f),
    show2dMapsIcon: jspb.Message.getFieldWithDefault(msg, 10, true),
    disableInternalBrowser: jspb.Message.getField(msg, 11),
    internalBrowserBlacklist: jspb.Message.getField(msg, 12),
    internalBrowserOriginWhitelist: jspb.Message.getFieldWithDefault(msg, 13, "*"),
    polarTileMergingLevel: jspb.Message.getField(msg, 14),
    jsBridgeRequestWhitelist: jspb.Message.getFieldWithDefault(msg, 15, "http://*.google.com/*"),
    mapsOptions: (f = msg.getMapsOptions()) && proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto}
 */
proto.keyhole.dbroot.ClientOptionsProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.ClientOptionsProto;
  return proto.keyhole.dbroot.ClientOptionsProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto}
 */
proto.keyhole.dbroot.ClientOptionsProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableDiskCache(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableEmbeddedBrowserVista(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDrawAtmosphere(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDrawStars(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setShaderFilePrefix(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseProtobufQuadtreePackets(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseExtendedCopyrightIds(value);
      break;
    case 8:
      var value = new proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions;
      reader.readMessage(value,proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.deserializeBinaryFromReader);
      msg.setPrecipitationsOptions(value);
      break;
    case 9:
      var value = new proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions;
      reader.readMessage(value,proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.deserializeBinaryFromReader);
      msg.setCaptureOptions(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShow2dMapsIcon(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableInternalBrowser(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternalBrowserBlacklist(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternalBrowserOriginWhitelist(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPolarTileMergingLevel(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsBridgeRequestWhitelist(value);
      break;
    case 16:
      var value = new proto.keyhole.dbroot.ClientOptionsProto.MapsOptions;
      reader.readMessage(value,proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.deserializeBinaryFromReader);
      msg.setMapsOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.ClientOptionsProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.ClientOptionsProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPrecipitationsOptions();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.serializeBinaryToWriter
    );
  }
  f = message.getCaptureOptions();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getMapsOptions();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.repeatedFields_, null);
};
goog.inherits(proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.displayName = 'proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageUrl: jspb.Message.getField(msg, 1),
    imageExpireTime: jspb.Message.getFieldWithDefault(msg, 2, 900),
    maxColorDistance: jspb.Message.getFieldWithDefault(msg, 3, 20),
    imageLevel: jspb.Message.getFieldWithDefault(msg, 4, 5),
    weatherMappingList: jspb.Message.toObjectList(msg.getWeatherMappingList(),
    proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.toObject, includeInstance),
    cloudsLayerUrl: jspb.Message.getField(msg, 6),
    animationDecelerationDelay: +jspb.Message.getFieldWithDefault(msg, 7, 20.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions;
  return proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageExpireTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxColorDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageLevel(value);
      break;
    case 5:
      var value = new proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping;
      reader.readMessage(value,proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.deserializeBinaryFromReader);
      msg.addWeatherMapping(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloudsLayerUrl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAnimationDecelerationDelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWeatherMappingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.displayName = 'proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    colorAbgr: jspb.Message.getField(msg, 1),
    weatherType: jspb.Message.getField(msg, 2),
    elongation: +jspb.Message.getFieldWithDefault(msg, 3, 1.0),
    opacity: jspb.Message.getOptionalFloatingPointField(msg, 4),
    fogDensity: jspb.Message.getOptionalFloatingPointField(msg, 5),
    speed0: jspb.Message.getOptionalFloatingPointField(msg, 6),
    speed1: jspb.Message.getOptionalFloatingPointField(msg, 7),
    speed2: jspb.Message.getOptionalFloatingPointField(msg, 8),
    speed3: jspb.Message.getOptionalFloatingPointField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping;
  return proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColorAbgr(value);
      break;
    case 2:
      var value = /** @type {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.WeatherType} */ (reader.readEnum());
      msg.setWeatherType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setElongation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOpacity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFogDensity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed0(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed1(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed2(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.WeatherType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.WeatherType = {
  NO_PRECIPITATION: 0,
  RAIN: 1,
  SNOW: 2
};

/**
 * required uint32 color_abgr = 1;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getColorAbgr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setColorAbgr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearColorAbgr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasColorAbgr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required WeatherType weather_type = 2;
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.WeatherType}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getWeatherType = function() {
  return /** @type {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.WeatherType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.WeatherType} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setWeatherType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearWeatherType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasWeatherType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float elongation = 3;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getElongation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 1.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setElongation = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearElongation = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasElongation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float opacity = 4;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getOpacity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setOpacity = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearOpacity = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasOpacity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float fog_density = 5;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getFogDensity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setFogDensity = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearFogDensity = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasFogDensity = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float speed0 = 6;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getSpeed0 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setSpeed0 = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearSpeed0 = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasSpeed0 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float speed1 = 7;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getSpeed1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setSpeed1 = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearSpeed1 = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasSpeed1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float speed2 = 8;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getSpeed2 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setSpeed2 = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearSpeed2 = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasSpeed2 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float speed3 = 9;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.getSpeed3 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.setSpeed3 = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.clearSpeed3 = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping.prototype.hasSpeed3 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string image_url = 1;
 * @return {string}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.setImageUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.clearImageUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.hasImageUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 image_expire_time = 2;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.getImageExpireTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 900));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.setImageExpireTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.clearImageExpireTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.hasImageExpireTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 max_color_distance = 3;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.getMaxColorDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 20));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.setMaxColorDistance = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.clearMaxColorDistance = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.hasMaxColorDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 image_level = 4;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.getImageLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 5));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.setImageLevel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.clearImageLevel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.hasImageLevel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated WeatherMapping weather_mapping = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping>}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.getWeatherMappingList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping, 5));
};


/** @param {!Array.<!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping>} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.setWeatherMappingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.addWeatherMapping = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping, opt_index);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.clearWeatherMappingList = function() {
  this.setWeatherMappingList([]);
};


/**
 * optional string clouds_layer_url = 6;
 * @return {string}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.getCloudsLayerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.setCloudsLayerUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.clearCloudsLayerUrl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.hasCloudsLayerUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float animation_deceleration_delay = 7;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.getAnimationDecelerationDelay = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 20.0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.setAnimationDecelerationDelay = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.clearAnimationDecelerationDelay = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.prototype.hasAnimationDecelerationDelay = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.displayName = 'proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowSaveAsImage: jspb.Message.getFieldWithDefault(msg, 1, true),
    maxFreeCaptureRes: jspb.Message.getFieldWithDefault(msg, 2, 2400),
    maxPremiumCaptureRes: jspb.Message.getFieldWithDefault(msg, 3, 4800)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions;
  return proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowSaveAsImage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxFreeCaptureRes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxPremiumCaptureRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool allow_save_as_image = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.getAllowSaveAsImage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.setAllowSaveAsImage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.clearAllowSaveAsImage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.hasAllowSaveAsImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 max_free_capture_res = 2;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.getMaxFreeCaptureRes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 2400));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.setMaxFreeCaptureRes = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.clearMaxFreeCaptureRes = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.hasMaxFreeCaptureRes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 max_premium_capture_res = 3;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.getMaxPremiumCaptureRes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 4800));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.setMaxPremiumCaptureRes = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.clearMaxPremiumCaptureRes = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions.prototype.hasMaxPremiumCaptureRes = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.ClientOptionsProto.MapsOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.displayName = 'proto.keyhole.dbroot.ClientOptionsProto.MapsOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.MapsOptions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableMaps: jspb.Message.getField(msg, 1),
    docsAutoDownloadEnabled: jspb.Message.getField(msg, 2),
    docsAutoDownloadInterval: jspb.Message.getField(msg, 3),
    docsAutoUploadEnabled: jspb.Message.getField(msg, 4),
    docsAutoUploadDelay: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.MapsOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.ClientOptionsProto.MapsOptions;
  return proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.MapsOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.ClientOptionsProto.MapsOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableMaps(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDocsAutoDownloadEnabled(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDocsAutoDownloadInterval(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDocsAutoUploadEnabled(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDocsAutoUploadDelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.ClientOptionsProto.MapsOptions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bool enable_maps = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.getEnableMaps = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.setEnableMaps = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.clearEnableMaps = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.hasEnableMaps = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool docs_auto_download_enabled = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.getDocsAutoDownloadEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.setDocsAutoDownloadEnabled = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.clearDocsAutoDownloadEnabled = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.hasDocsAutoDownloadEnabled = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 docs_auto_download_interval = 3;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.getDocsAutoDownloadInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.setDocsAutoDownloadInterval = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.clearDocsAutoDownloadInterval = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.hasDocsAutoDownloadInterval = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool docs_auto_upload_enabled = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.getDocsAutoUploadEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.setDocsAutoUploadEnabled = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.clearDocsAutoUploadEnabled = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.hasDocsAutoUploadEnabled = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 docs_auto_upload_delay = 5;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.getDocsAutoUploadDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.setDocsAutoUploadDelay = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.clearDocsAutoUploadDelay = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.MapsOptions.prototype.hasDocsAutoUploadDelay = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool disable_disk_cache = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getDisableDiskCache = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setDisableDiskCache = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearDisableDiskCache = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasDisableDiskCache = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool disable_embedded_browser_vista = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getDisableEmbeddedBrowserVista = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setDisableEmbeddedBrowserVista = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearDisableEmbeddedBrowserVista = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasDisableEmbeddedBrowserVista = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool draw_atmosphere = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getDrawAtmosphere = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setDrawAtmosphere = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearDrawAtmosphere = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasDrawAtmosphere = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool draw_stars = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getDrawStars = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setDrawStars = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearDrawStars = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasDrawStars = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string shader_file_prefix = 5;
 * @return {string}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getShaderFilePrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setShaderFilePrefix = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearShaderFilePrefix = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasShaderFilePrefix = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool use_protobuf_quadtree_packets = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getUseProtobufQuadtreePackets = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setUseProtobufQuadtreePackets = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearUseProtobufQuadtreePackets = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasUseProtobufQuadtreePackets = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool use_extended_copyright_ids = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getUseExtendedCopyrightIds = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setUseExtendedCopyrightIds = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearUseExtendedCopyrightIds = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasUseExtendedCopyrightIds = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PrecipitationsOptions precipitations_options = 8;
 * @return {?proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getPrecipitationsOptions = function() {
  return /** @type{?proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions, 8));
};


/** @param {?proto.keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions|undefined} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setPrecipitationsOptions = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearPrecipitationsOptions = function() {
  this.setPrecipitationsOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasPrecipitationsOptions = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CaptureOptions capture_options = 9;
 * @return {?proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getCaptureOptions = function() {
  return /** @type{?proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions, 9));
};


/** @param {?proto.keyhole.dbroot.ClientOptionsProto.CaptureOptions|undefined} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setCaptureOptions = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearCaptureOptions = function() {
  this.setCaptureOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasCaptureOptions = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool show_2d_maps_icon = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getShow2dMapsIcon = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setShow2dMapsIcon = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearShow2dMapsIcon = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasShow2dMapsIcon = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool disable_internal_browser = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getDisableInternalBrowser = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setDisableInternalBrowser = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearDisableInternalBrowser = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasDisableInternalBrowser = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string internal_browser_blacklist = 12;
 * @return {string}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getInternalBrowserBlacklist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setInternalBrowserBlacklist = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearInternalBrowserBlacklist = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasInternalBrowserBlacklist = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string internal_browser_origin_whitelist = 13;
 * @return {string}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getInternalBrowserOriginWhitelist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, "*"));
};


/** @param {string} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setInternalBrowserOriginWhitelist = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearInternalBrowserOriginWhitelist = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasInternalBrowserOriginWhitelist = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 polar_tile_merging_level = 14;
 * @return {number}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getPolarTileMergingLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setPolarTileMergingLevel = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearPolarTileMergingLevel = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasPolarTileMergingLevel = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string js_bridge_request_whitelist = 15;
 * @return {string}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getJsBridgeRequestWhitelist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, "http://*.google.com/*"));
};


/** @param {string} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setJsBridgeRequestWhitelist = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearJsBridgeRequestWhitelist = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasJsBridgeRequestWhitelist = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional MapsOptions maps_options = 16;
 * @return {?proto.keyhole.dbroot.ClientOptionsProto.MapsOptions}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.getMapsOptions = function() {
  return /** @type{?proto.keyhole.dbroot.ClientOptionsProto.MapsOptions} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.ClientOptionsProto.MapsOptions, 16));
};


/** @param {?proto.keyhole.dbroot.ClientOptionsProto.MapsOptions|undefined} value */
proto.keyhole.dbroot.ClientOptionsProto.prototype.setMapsOptions = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.keyhole.dbroot.ClientOptionsProto.prototype.clearMapsOptions = function() {
  this.setMapsOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.ClientOptionsProto.prototype.hasMapsOptions = function() {
  return jspb.Message.getField(this, 16) != null;
};


