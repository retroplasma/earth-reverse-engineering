/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.CobrandProto');
goog.provide('proto.keyhole.dbroot.CobrandProto.Coord');
goog.provide('proto.keyhole.dbroot.CobrandProto.TiePoint');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.CobrandProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.CobrandProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.CobrandProto.displayName = 'proto.keyhole.dbroot.CobrandProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.CobrandProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.CobrandProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.CobrandProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.CobrandProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    logoUrl: jspb.Message.getField(msg, 1),
    xCoord: (f = msg.getXCoord()) && proto.keyhole.dbroot.CobrandProto.Coord.toObject(includeInstance, f),
    yCoord: (f = msg.getYCoord()) && proto.keyhole.dbroot.CobrandProto.Coord.toObject(includeInstance, f),
    tiePoint: jspb.Message.getFieldWithDefault(msg, 4, 6),
    screenSize: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.CobrandProto}
 */
proto.keyhole.dbroot.CobrandProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.CobrandProto;
  return proto.keyhole.dbroot.CobrandProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.CobrandProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.CobrandProto}
 */
proto.keyhole.dbroot.CobrandProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogoUrl(value);
      break;
    case 2:
      var value = new proto.keyhole.dbroot.CobrandProto.Coord;
      reader.readMessage(value,proto.keyhole.dbroot.CobrandProto.Coord.deserializeBinaryFromReader);
      msg.setXCoord(value);
      break;
    case 3:
      var value = new proto.keyhole.dbroot.CobrandProto.Coord;
      reader.readMessage(value,proto.keyhole.dbroot.CobrandProto.Coord.deserializeBinaryFromReader);
      msg.setYCoord(value);
      break;
    case 4:
      var value = /** @type {!proto.keyhole.dbroot.CobrandProto.TiePoint} */ (reader.readEnum());
      msg.setTiePoint(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScreenSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.CobrandProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.CobrandProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.CobrandProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.CobrandProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getXCoord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.keyhole.dbroot.CobrandProto.Coord.serializeBinaryToWriter
    );
  }
  f = message.getYCoord();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.keyhole.dbroot.CobrandProto.Coord.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.keyhole.dbroot.CobrandProto.TiePoint} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.keyhole.dbroot.CobrandProto.TiePoint = {
  TOP_LEFT: 0,
  TOP_CENTER: 1,
  TOP_RIGHT: 2,
  MID_LEFT: 3,
  MID_CENTER: 4,
  MID_RIGHT: 5,
  BOTTOM_LEFT: 6,
  BOTTOM_CENTER: 7,
  BOTTOM_RIGHT: 8
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.CobrandProto.Coord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.CobrandProto.Coord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.CobrandProto.Coord.displayName = 'proto.keyhole.dbroot.CobrandProto.Coord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.CobrandProto.Coord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.CobrandProto.Coord} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.CobrandProto.Coord.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    isRelative: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.CobrandProto.Coord}
 */
proto.keyhole.dbroot.CobrandProto.Coord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.CobrandProto.Coord;
  return proto.keyhole.dbroot.CobrandProto.Coord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.CobrandProto.Coord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.CobrandProto.Coord}
 */
proto.keyhole.dbroot.CobrandProto.Coord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRelative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.CobrandProto.Coord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.CobrandProto.Coord} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.CobrandProto.Coord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required double value = 1;
 * @return {number}
 */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.CobrandProto.Coord.prototype.clearValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_relative = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.getIsRelative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.setIsRelative = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.dbroot.CobrandProto.Coord.prototype.clearIsRelative = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.CobrandProto.Coord.prototype.hasIsRelative = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string logo_url = 1;
 * @return {string}
 */
proto.keyhole.dbroot.CobrandProto.prototype.getLogoUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.CobrandProto.prototype.setLogoUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.CobrandProto.prototype.clearLogoUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.CobrandProto.prototype.hasLogoUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Coord x_coord = 2;
 * @return {?proto.keyhole.dbroot.CobrandProto.Coord}
 */
proto.keyhole.dbroot.CobrandProto.prototype.getXCoord = function() {
  return /** @type{?proto.keyhole.dbroot.CobrandProto.Coord} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.CobrandProto.Coord, 2));
};


/** @param {?proto.keyhole.dbroot.CobrandProto.Coord|undefined} value */
proto.keyhole.dbroot.CobrandProto.prototype.setXCoord = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.keyhole.dbroot.CobrandProto.prototype.clearXCoord = function() {
  this.setXCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.CobrandProto.prototype.hasXCoord = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Coord y_coord = 3;
 * @return {?proto.keyhole.dbroot.CobrandProto.Coord}
 */
proto.keyhole.dbroot.CobrandProto.prototype.getYCoord = function() {
  return /** @type{?proto.keyhole.dbroot.CobrandProto.Coord} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.CobrandProto.Coord, 3));
};


/** @param {?proto.keyhole.dbroot.CobrandProto.Coord|undefined} value */
proto.keyhole.dbroot.CobrandProto.prototype.setYCoord = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.keyhole.dbroot.CobrandProto.prototype.clearYCoord = function() {
  this.setYCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.CobrandProto.prototype.hasYCoord = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TiePoint tie_point = 4;
 * @return {!proto.keyhole.dbroot.CobrandProto.TiePoint}
 */
proto.keyhole.dbroot.CobrandProto.prototype.getTiePoint = function() {
  return /** @type {!proto.keyhole.dbroot.CobrandProto.TiePoint} */ (jspb.Message.getFieldWithDefault(this, 4, 6));
};


/** @param {!proto.keyhole.dbroot.CobrandProto.TiePoint} value */
proto.keyhole.dbroot.CobrandProto.prototype.setTiePoint = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.CobrandProto.prototype.clearTiePoint = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.CobrandProto.prototype.hasTiePoint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double screen_size = 5;
 * @return {number}
 */
proto.keyhole.dbroot.CobrandProto.prototype.getScreenSize = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.keyhole.dbroot.CobrandProto.prototype.setScreenSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.keyhole.dbroot.CobrandProto.prototype.clearScreenSize = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.CobrandProto.prototype.hasScreenSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


