/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.PostingServerProto');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.keyhole.dbroot.StringIdOrValueProto');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.PostingServerProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.dbroot.PostingServerProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.PostingServerProto.displayName = 'proto.keyhole.dbroot.PostingServerProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.PostingServerProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.PostingServerProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.PostingServerProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    baseUrl: (f = msg.getBaseUrl()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    postWizardPath: (f = msg.getPostWizardPath()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    fileSubmitPath: (f = msg.getFileSubmitPath()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.PostingServerProto}
 */
proto.keyhole.dbroot.PostingServerProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.PostingServerProto;
  return proto.keyhole.dbroot.PostingServerProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.PostingServerProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.PostingServerProto}
 */
proto.keyhole.dbroot.PostingServerProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setBaseUrl(value);
      break;
    case 3:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setPostWizardPath(value);
      break;
    case 4:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setFileSubmitPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.PostingServerProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.PostingServerProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.PostingServerProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = message.getBaseUrl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = message.getPostWizardPath();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = message.getFileSubmitPath();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional StringIdOrValueProto name = 1;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.getName = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 1));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.PostingServerProto.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.keyhole.dbroot.PostingServerProto.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringIdOrValueProto base_url = 2;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.getBaseUrl = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 2));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.PostingServerProto.prototype.setBaseUrl = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.keyhole.dbroot.PostingServerProto.prototype.clearBaseUrl = function() {
  this.setBaseUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.hasBaseUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StringIdOrValueProto post_wizard_path = 3;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.getPostWizardPath = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 3));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.PostingServerProto.prototype.setPostWizardPath = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.keyhole.dbroot.PostingServerProto.prototype.clearPostWizardPath = function() {
  this.setPostWizardPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.hasPostWizardPath = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StringIdOrValueProto file_submit_path = 4;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.getFileSubmitPath = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 4));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.PostingServerProto.prototype.setFileSubmitPath = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.keyhole.dbroot.PostingServerProto.prototype.clearFileSubmitPath = function() {
  this.setFileSubmitPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.PostingServerProto.prototype.hasFileSubmitPath = function() {
  return jspb.Message.getField(this, 4) != null;
};


