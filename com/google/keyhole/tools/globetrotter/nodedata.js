/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.geo_globetrotter_proto_rocktree.NodeData');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.geo_globetrotter_proto_rocktree.Mesh');
goog.require('proto.geo_globetrotter_proto_rocktree.NodeKey');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo_globetrotter_proto_rocktree.NodeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geo_globetrotter_proto_rocktree.NodeData.repeatedFields_, null);
};
goog.inherits(proto.geo_globetrotter_proto_rocktree.NodeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo_globetrotter_proto_rocktree.NodeData.displayName = 'proto.geo_globetrotter_proto_rocktree.NodeData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geo_globetrotter_proto_rocktree.NodeData.repeatedFields_ = [1,2,3,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.toObject = function(opt_includeInstance) {
  return proto.geo_globetrotter_proto_rocktree.NodeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo_globetrotter_proto_rocktree.NodeData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    matrixGlobeFromMeshList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    meshesList: jspb.Message.toObjectList(msg.getMeshesList(),
    proto.geo_globetrotter_proto_rocktree.Mesh.toObject, includeInstance),
    copyrightIdsList: jspb.Message.getField(msg, 3),
    nodeKey: (f = msg.getNodeKey()) && proto.geo_globetrotter_proto_rocktree.NodeKey.toObject(includeInstance, f),
    kmlBoundingBoxList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    waterMesh: (f = msg.getWaterMesh()) && proto.geo_globetrotter_proto_rocktree.Mesh.toObject(includeInstance, f),
    overlaySurfaceMeshesList: jspb.Message.toObjectList(msg.getOverlaySurfaceMeshesList(),
    proto.geo_globetrotter_proto_rocktree.Mesh.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo_globetrotter_proto_rocktree.NodeData}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo_globetrotter_proto_rocktree.NodeData;
  return proto.geo_globetrotter_proto_rocktree.NodeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo_globetrotter_proto_rocktree.NodeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo_globetrotter_proto_rocktree.NodeData}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setMatrixGlobeFromMeshList(value);
      break;
    case 2:
      var value = new proto.geo_globetrotter_proto_rocktree.Mesh;
      reader.readMessage(value,proto.geo_globetrotter_proto_rocktree.Mesh.deserializeBinaryFromReader);
      msg.addMeshes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addCopyrightIds(value);
      break;
    case 4:
      var value = new proto.geo_globetrotter_proto_rocktree.NodeKey;
      reader.readMessage(value,proto.geo_globetrotter_proto_rocktree.NodeKey.deserializeBinaryFromReader);
      msg.setNodeKey(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setKmlBoundingBoxList(value);
      break;
    case 6:
      var value = new proto.geo_globetrotter_proto_rocktree.Mesh;
      reader.readMessage(value,proto.geo_globetrotter_proto_rocktree.Mesh.deserializeBinaryFromReader);
      msg.setWaterMesh(value);
      break;
    case 7:
      var value = new proto.geo_globetrotter_proto_rocktree.Mesh;
      reader.readMessage(value,proto.geo_globetrotter_proto_rocktree.Mesh.deserializeBinaryFromReader);
      msg.addOverlaySurfaceMeshes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo_globetrotter_proto_rocktree.NodeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo_globetrotter_proto_rocktree.NodeData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo_globetrotter_proto_rocktree.NodeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatrixGlobeFromMeshList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
  f = message.getMeshesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.geo_globetrotter_proto_rocktree.Mesh.serializeBinaryToWriter
    );
  }
  f = message.getCopyrightIdsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = message.getNodeKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.geo_globetrotter_proto_rocktree.NodeKey.serializeBinaryToWriter
    );
  }
  f = message.getKmlBoundingBoxList();
  if (f.length > 0) {
    writer.writePackedDouble(
      5,
      f
    );
  }
  f = message.getWaterMesh();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.geo_globetrotter_proto_rocktree.Mesh.serializeBinaryToWriter
    );
  }
  f = message.getOverlaySurfaceMeshesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.geo_globetrotter_proto_rocktree.Mesh.serializeBinaryToWriter
    );
  }
};


/**
 * repeated double matrix_globe_from_mesh = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.getMatrixGlobeFromMeshList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.setMatrixGlobeFromMeshList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.addMatrixGlobeFromMesh = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.geo_globetrotter_proto_rocktree.NodeData.prototype.clearMatrixGlobeFromMeshList = function() {
  this.setMatrixGlobeFromMeshList([]);
};


/**
 * repeated Mesh meshes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.geo_globetrotter_proto_rocktree.Mesh>}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.getMeshesList = function() {
  return /** @type{!Array.<!proto.geo_globetrotter_proto_rocktree.Mesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.geo_globetrotter_proto_rocktree.Mesh, 2));
};


/** @param {!Array.<!proto.geo_globetrotter_proto_rocktree.Mesh>} value */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.setMeshesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.geo_globetrotter_proto_rocktree.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.geo_globetrotter_proto_rocktree.Mesh}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.addMeshes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.geo_globetrotter_proto_rocktree.Mesh, opt_index);
};


proto.geo_globetrotter_proto_rocktree.NodeData.prototype.clearMeshesList = function() {
  this.setMeshesList([]);
};


/**
 * repeated uint32 copyright_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.getCopyrightIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.setCopyrightIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.addCopyrightIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.geo_globetrotter_proto_rocktree.NodeData.prototype.clearCopyrightIdsList = function() {
  this.setCopyrightIdsList([]);
};


/**
 * optional NodeKey node_key = 4;
 * @return {?proto.geo_globetrotter_proto_rocktree.NodeKey}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.getNodeKey = function() {
  return /** @type{?proto.geo_globetrotter_proto_rocktree.NodeKey} */ (
    jspb.Message.getWrapperField(this, proto.geo_globetrotter_proto_rocktree.NodeKey, 4));
};


/** @param {?proto.geo_globetrotter_proto_rocktree.NodeKey|undefined} value */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.setNodeKey = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.geo_globetrotter_proto_rocktree.NodeData.prototype.clearNodeKey = function() {
  this.setNodeKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.hasNodeKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated double kml_bounding_box = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.getKmlBoundingBoxList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array.<number>} value */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.setKmlBoundingBoxList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.addKmlBoundingBox = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.geo_globetrotter_proto_rocktree.NodeData.prototype.clearKmlBoundingBoxList = function() {
  this.setKmlBoundingBoxList([]);
};


/**
 * optional Mesh water_mesh = 6;
 * @return {?proto.geo_globetrotter_proto_rocktree.Mesh}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.getWaterMesh = function() {
  return /** @type{?proto.geo_globetrotter_proto_rocktree.Mesh} */ (
    jspb.Message.getWrapperField(this, proto.geo_globetrotter_proto_rocktree.Mesh, 6));
};


/** @param {?proto.geo_globetrotter_proto_rocktree.Mesh|undefined} value */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.setWaterMesh = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.geo_globetrotter_proto_rocktree.NodeData.prototype.clearWaterMesh = function() {
  this.setWaterMesh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.hasWaterMesh = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Mesh overlay_surface_meshes = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.geo_globetrotter_proto_rocktree.Mesh>}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.getOverlaySurfaceMeshesList = function() {
  return /** @type{!Array.<!proto.geo_globetrotter_proto_rocktree.Mesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.geo_globetrotter_proto_rocktree.Mesh, 7));
};


/** @param {!Array.<!proto.geo_globetrotter_proto_rocktree.Mesh>} value */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.setOverlaySurfaceMeshesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.geo_globetrotter_proto_rocktree.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.geo_globetrotter_proto_rocktree.Mesh}
 */
proto.geo_globetrotter_proto_rocktree.NodeData.prototype.addOverlaySurfaceMeshes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.geo_globetrotter_proto_rocktree.Mesh, opt_index);
};


proto.geo_globetrotter_proto_rocktree.NodeData.prototype.clearOverlaySurfaceMeshesList = function() {
  this.setOverlaySurfaceMeshesList([]);
};


