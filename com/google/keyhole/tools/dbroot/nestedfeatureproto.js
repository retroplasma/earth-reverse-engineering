/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.NestedFeatureProto');
goog.provide('proto.keyhole.dbroot.NestedFeatureProto.FeatureType');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.keyhole.dbroot.FolderProto');
goog.require('proto.keyhole.dbroot.LayerProto');
goog.require('proto.keyhole.dbroot.LookAtProto');
goog.require('proto.keyhole.dbroot.RequirementProto');
goog.require('proto.keyhole.dbroot.StringIdOrValueProto');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.NestedFeatureProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.dbroot.NestedFeatureProto.repeatedFields_, null);
};
goog.inherits(proto.keyhole.dbroot.NestedFeatureProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.NestedFeatureProto.displayName = 'proto.keyhole.dbroot.NestedFeatureProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.dbroot.NestedFeatureProto.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.NestedFeatureProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.NestedFeatureProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.NestedFeatureProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureType: jspb.Message.getField(msg, 1),
    kmlUrl: (f = msg.getKmlUrl()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    databaseUrl: jspb.Message.getField(msg, 21),
    layer: (f = msg.getLayer()) && proto.keyhole.dbroot.LayerProto.toObject(includeInstance, f),
    folder: (f = msg.getFolder()) && proto.keyhole.dbroot.FolderProto.toObject(includeInstance, f),
    requirement: (f = msg.getRequirement()) && proto.keyhole.dbroot.RequirementProto.toObject(includeInstance, f),
    channelId: jspb.Message.getField(msg, 6),
    displayName: (f = msg.getDisplayName()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    isVisible: jspb.Message.getFieldWithDefault(msg, 8, true),
    isEnabled: jspb.Message.getFieldWithDefault(msg, 9, true),
    isChecked: jspb.Message.getFieldWithDefault(msg, 10, false),
    layerMenuIconPath: jspb.Message.getFieldWithDefault(msg, 11, "icons/773_l.png"),
    description: (f = msg.getDescription()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    lookAt: (f = msg.getLookAt()) && proto.keyhole.dbroot.LookAtProto.toObject(includeInstance, f),
    assetUuid: jspb.Message.getField(msg, 15),
    isSaveLocked: jspb.Message.getFieldWithDefault(msg, 16, true),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.keyhole.dbroot.NestedFeatureProto.toObject, includeInstance),
    clientConfigScriptName: jspb.Message.getField(msg, 18),
    dioramaDataChannelBase: jspb.Message.getFieldWithDefault(msg, 19, -1),
    replicaDataChannelBase: jspb.Message.getFieldWithDefault(msg, 20, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.NestedFeatureProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.NestedFeatureProto;
  return proto.keyhole.dbroot.NestedFeatureProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.NestedFeatureProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.NestedFeatureProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.keyhole.dbroot.NestedFeatureProto.FeatureType} */ (reader.readEnum());
      msg.setFeatureType(value);
      break;
    case 2:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setKmlUrl(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabaseUrl(value);
      break;
    case 3:
      var value = new proto.keyhole.dbroot.LayerProto;
      reader.readMessage(value,proto.keyhole.dbroot.LayerProto.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    case 4:
      var value = new proto.keyhole.dbroot.FolderProto;
      reader.readMessage(value,proto.keyhole.dbroot.FolderProto.deserializeBinaryFromReader);
      msg.setFolder(value);
      break;
    case 5:
      var value = new proto.keyhole.dbroot.RequirementProto;
      reader.readMessage(value,proto.keyhole.dbroot.RequirementProto.deserializeBinaryFromReader);
      msg.setRequirement(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelId(value);
      break;
    case 7:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setDisplayName(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVisible(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEnabled(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsChecked(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayerMenuIconPath(value);
      break;
    case 12:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 13:
      var value = new proto.keyhole.dbroot.LookAtProto;
      reader.readMessage(value,proto.keyhole.dbroot.LookAtProto.deserializeBinaryFromReader);
      msg.setLookAt(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetUuid(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSaveLocked(value);
      break;
    case 17:
      var value = new proto.keyhole.dbroot.NestedFeatureProto;
      reader.readMessage(value,proto.keyhole.dbroot.NestedFeatureProto.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientConfigScriptName(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDioramaDataChannelBase(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReplicaDataChannelBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.NestedFeatureProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.NestedFeatureProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.NestedFeatureProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.keyhole.dbroot.NestedFeatureProto.FeatureType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKmlUrl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.keyhole.dbroot.LayerProto.serializeBinaryToWriter
    );
  }
  f = message.getFolder();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.keyhole.dbroot.FolderProto.serializeBinaryToWriter
    );
  }
  f = message.getRequirement();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.keyhole.dbroot.RequirementProto.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getDisplayName();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = message.getLookAt();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.keyhole.dbroot.LookAtProto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.keyhole.dbroot.NestedFeatureProto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeInt32(
      20,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.keyhole.dbroot.NestedFeatureProto.FeatureType = {
  TYPE_POINT_Z: 1,
  TYPE_POLYGON_Z: 2,
  TYPE_LINE_Z: 3,
  TYPE_TERRAIN: 4
};

/**
 * optional FeatureType feature_type = 1;
 * @return {!proto.keyhole.dbroot.NestedFeatureProto.FeatureType}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getFeatureType = function() {
  return /** @type {!proto.keyhole.dbroot.NestedFeatureProto.FeatureType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.keyhole.dbroot.NestedFeatureProto.FeatureType} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setFeatureType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearFeatureType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasFeatureType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringIdOrValueProto kml_url = 2;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getKmlUrl = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 2));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setKmlUrl = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearKmlUrl = function() {
  this.setKmlUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasKmlUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string database_url = 21;
 * @return {string}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getDatabaseUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setDatabaseUrl = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearDatabaseUrl = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasDatabaseUrl = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional LayerProto layer = 3;
 * @return {?proto.keyhole.dbroot.LayerProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getLayer = function() {
  return /** @type{?proto.keyhole.dbroot.LayerProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.LayerProto, 3));
};


/** @param {?proto.keyhole.dbroot.LayerProto|undefined} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setLayer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearLayer = function() {
  this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FolderProto folder = 4;
 * @return {?proto.keyhole.dbroot.FolderProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getFolder = function() {
  return /** @type{?proto.keyhole.dbroot.FolderProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.FolderProto, 4));
};


/** @param {?proto.keyhole.dbroot.FolderProto|undefined} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setFolder = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearFolder = function() {
  this.setFolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasFolder = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequirementProto requirement = 5;
 * @return {?proto.keyhole.dbroot.RequirementProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getRequirement = function() {
  return /** @type{?proto.keyhole.dbroot.RequirementProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.RequirementProto, 5));
};


/** @param {?proto.keyhole.dbroot.RequirementProto|undefined} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setRequirement = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearRequirement = function() {
  this.setRequirement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasRequirement = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 channel_id = 6;
 * @return {number}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setChannelId = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearChannelId = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional StringIdOrValueProto display_name = 7;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getDisplayName = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 7));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setDisplayName = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearDisplayName = function() {
  this.setDisplayName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool is_visible = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getIsVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setIsVisible = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearIsVisible = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasIsVisible = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool is_enabled = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getIsEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setIsEnabled = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearIsEnabled = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasIsEnabled = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool is_checked = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getIsChecked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setIsChecked = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearIsChecked = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasIsChecked = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string layer_menu_icon_path = 11;
 * @return {string}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getLayerMenuIconPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "icons/773_l.png"));
};


/** @param {string} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setLayerMenuIconPath = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearLayerMenuIconPath = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasLayerMenuIconPath = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional StringIdOrValueProto description = 12;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getDescription = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 12));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setDescription = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearDescription = function() {
  this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional LookAtProto look_at = 13;
 * @return {?proto.keyhole.dbroot.LookAtProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getLookAt = function() {
  return /** @type{?proto.keyhole.dbroot.LookAtProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.LookAtProto, 13));
};


/** @param {?proto.keyhole.dbroot.LookAtProto|undefined} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setLookAt = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearLookAt = function() {
  this.setLookAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasLookAt = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string asset_uuid = 15;
 * @return {string}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getAssetUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setAssetUuid = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearAssetUuid = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasAssetUuid = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool is_save_locked = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getIsSaveLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, true));
};


/** @param {boolean} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setIsSaveLocked = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearIsSaveLocked = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasIsSaveLocked = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated NestedFeatureProto children = 17;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.NestedFeatureProto>}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getChildrenList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.NestedFeatureProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.NestedFeatureProto, 17));
};


/** @param {!Array.<!proto.keyhole.dbroot.NestedFeatureProto>} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.keyhole.dbroot.NestedFeatureProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.NestedFeatureProto}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.keyhole.dbroot.NestedFeatureProto, opt_index);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


/**
 * optional string client_config_script_name = 18;
 * @return {string}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getClientConfigScriptName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setClientConfigScriptName = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearClientConfigScriptName = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasClientConfigScriptName = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int32 diorama_data_channel_base = 19;
 * @return {number}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getDioramaDataChannelBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, -1));
};


/** @param {number} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setDioramaDataChannelBase = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearDioramaDataChannelBase = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasDioramaDataChannelBase = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional int32 replica_data_channel_base = 20;
 * @return {number}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.getReplicaDataChannelBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, -1));
};


/** @param {number} value */
proto.keyhole.dbroot.NestedFeatureProto.prototype.setReplicaDataChannelBase = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.keyhole.dbroot.NestedFeatureProto.prototype.clearReplicaDataChannelBase = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.NestedFeatureProto.prototype.hasReplicaDataChannelBase = function() {
  return jspb.Message.getField(this, 20) != null;
};


