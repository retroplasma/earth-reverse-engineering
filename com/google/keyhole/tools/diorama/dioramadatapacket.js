/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.DioramaDataPacket');
goog.provide('proto.keyhole.DioramaDataPacket.AltitudeMode');
goog.provide('proto.keyhole.DioramaDataPacket.ClampMode');
goog.provide('proto.keyhole.DioramaDataPacket.Codec');
goog.provide('proto.keyhole.DioramaDataPacket.Objects');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.DioramaDataPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.DioramaDataPacket.repeatedFields_, null);
};
goog.inherits(proto.keyhole.DioramaDataPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.DioramaDataPacket.displayName = 'proto.keyhole.DioramaDataPacket';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.DioramaDataPacket.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.DioramaDataPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.DioramaDataPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.DioramaDataPacket} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.DioramaDataPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.keyhole.DioramaDataPacket.Objects.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.DioramaDataPacket}
 */
proto.keyhole.DioramaDataPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.DioramaDataPacket;
  return proto.keyhole.DioramaDataPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.DioramaDataPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.DioramaDataPacket}
 */
proto.keyhole.DioramaDataPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 16:
      var value = new proto.keyhole.DioramaDataPacket.Objects;
      reader.readGroup(16, value,proto.keyhole.DioramaDataPacket.Objects.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaDataPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.DioramaDataPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.DioramaDataPacket} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.DioramaDataPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      16,
      f,
      proto.keyhole.DioramaDataPacket.Objects.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.keyhole.DioramaDataPacket.Codec = {
  NO_CODEC: 0,
  JPEG: 1,
  PNG: 2,
  DXT: 3,
  JP2: 4,
  HARDWARE_COMPRESSED_IMAGE: 5,
  DIO_GEOMETRY: 101,
  BUILDING_Z: 102,
  DIO_ANIMATED_GEOMETRY: 103
};

/**
 * @enum {number}
 */
proto.keyhole.DioramaDataPacket.ClampMode = {
  CLAMP_S_CLAMP_T: 1,
  CLAMP_S_WRAP_T: 2,
  WRAP_S_CLAMP_T: 3,
  WRAP_S_WRAP_T: 4
};

/**
 * @enum {number}
 */
proto.keyhole.DioramaDataPacket.AltitudeMode = {
  RELATIVE_TO_SURFACE: 0,
  RELATIVE_TO_SEA_FLOOR: 1,
  ABSOLUTE_ALTITUDE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.DioramaDataPacket.Objects = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.DioramaDataPacket.Objects.repeatedFields_, null);
};
goog.inherits(proto.keyhole.DioramaDataPacket.Objects, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.DioramaDataPacket.Objects.displayName = 'proto.keyhole.DioramaDataPacket.Objects';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.DioramaDataPacket.Objects.repeatedFields_ = [-12,-9,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.DioramaDataPacket.Objects.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.DioramaDataPacket.Objects} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.DioramaDataPacket.Objects.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    codec: jspb.Message.getField(msg, -14),
    providerId: jspb.Message.getField(msg, -13),
    textureSubWindowList: jspb.Message.getRepeatedFloatingPointField(msg, -12),
    rotate90CcwInLodParent: jspb.Message.getField(msg, -8),
    textureClampMode: jspb.Message.getField(msg, -11),
    boundingBox: msg.getBoundingBox_asB64(),
    useTextureObjectIdList: jspb.Message.getField(msg, -9),
    lodChildTileList: jspb.Message.getField(msg, 5),
    relativeAltitudeAnchorLat: jspb.Message.getOptionalFloatingPointField(msg, -7),
    relativeAltitudeAnchorLng: jspb.Message.getOptionalFloatingPointField(msg, -6),
    relativeAltitudeAnchorElevation: jspb.Message.getOptionalFloatingPointField(msg, 3),
    altitudeMode: jspb.Message.getField(msg, 2),
    descriptionId: jspb.Message.getField(msg, -5),
    buildingHasInfoBubble: jspb.Message.getFieldWithDefault(msg, 4, true),
    previousChunkPath: jspb.Message.getField(msg, -4),
    previousChunkChannel: jspb.Message.getField(msg, -3),
    previousChunkObject: jspb.Message.getField(msg, -2),
    reduceResolutionLevels: jspb.Message.getField(msg, -1),
    concatenatedData: msg.getConcatenatedData_asB64(),
    hasNextChunk: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.DioramaDataPacket.Objects}
 */
proto.keyhole.DioramaDataPacket.Objects.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.DioramaDataPacket.Objects;
  return proto.keyhole.DioramaDataPacket.Objects.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.DioramaDataPacket.Objects} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.DioramaDataPacket.Objects}
 */
proto.keyhole.DioramaDataPacket.Objects.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {!proto.keyhole.DioramaDataPacket.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProviderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addTextureSubWindow(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRotate90CcwInLodParent(value);
      break;
    case 5:
      var value = /** @type {!proto.keyhole.DioramaDataPacket.ClampMode} */ (reader.readEnum());
      msg.setTextureClampMode(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBoundingBox(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addUseTextureObjectId(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.addLodChildTile(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeAltitudeAnchorLat(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeAltitudeAnchorLng(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRelativeAltitudeAnchorElevation(value);
      break;
    case 18:
      var value = /** @type {!proto.keyhole.DioramaDataPacket.AltitudeMode} */ (reader.readEnum());
      msg.setAltitudeMode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescriptionId(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBuildingHasInfoBubble(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setPreviousChunkPath(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPreviousChunkChannel(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPreviousChunkObject(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReduceResolutionLevels(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConcatenatedData(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasNextChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.DioramaDataPacket.Objects.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.DioramaDataPacket.Objects} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.DioramaDataPacket.Objects.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, -15));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!proto.keyhole.DioramaDataPacket.Codec} */ (jspb.Message.getField(message, -14));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -13));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTextureSubWindowList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {!proto.keyhole.DioramaDataPacket.ClampMode} */ (jspb.Message.getField(message, -11));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, -10));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getUseTextureObjectIdList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
  f = message.getLodChildTileList();
  if (f.length > 0) {
    writer.writeRepeatedFixed64(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -7));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -6));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = /** @type {!proto.keyhole.DioramaDataPacket.AltitudeMode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, -5));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -4));
  if (f != null) {
    writer.writeFixed64(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -3));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -2));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, -1));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 0));
  if (f != null) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
};


/**
 * required bytes data = 1;
 * @return {string}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, -15, ""));
};


/**
 * required bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * required bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setData = function(value) {
  jspb.Message.setField(this, -15, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearData = function() {
  jspb.Message.setField(this, -15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasData = function() {
  return jspb.Message.getField(this, -15) != null;
};


/**
 * required Codec codec = 2;
 * @return {!proto.keyhole.DioramaDataPacket.Codec}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getCodec = function() {
  return /** @type {!proto.keyhole.DioramaDataPacket.Codec} */ (jspb.Message.getFieldWithDefault(this, -14, 0));
};


/** @param {!proto.keyhole.DioramaDataPacket.Codec} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setCodec = function(value) {
  jspb.Message.setField(this, -14, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearCodec = function() {
  jspb.Message.setField(this, -14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasCodec = function() {
  return jspb.Message.getField(this, -14) != null;
};


/**
 * optional int32 provider_id = 3;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getProviderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -13, 0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setProviderId = function(value) {
  jspb.Message.setField(this, -13, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearProviderId = function() {
  jspb.Message.setField(this, -13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasProviderId = function() {
  return jspb.Message.getField(this, -13) != null;
};


/**
 * repeated float texture_sub_window = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getTextureSubWindowList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, -12));
};


/** @param {!Array.<number>} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setTextureSubWindowList = function(value) {
  jspb.Message.setField(this, -12, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.addTextureSubWindow = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, -12, value, opt_index);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearTextureSubWindowList = function() {
  this.setTextureSubWindowList([]);
};


/**
 * optional int32 rotate_90_ccw_in_lod_parent = 8;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getRotate90CcwInLodParent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -8, 0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setRotate90CcwInLodParent = function(value) {
  jspb.Message.setField(this, -8, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearRotate90CcwInLodParent = function() {
  jspb.Message.setField(this, -8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasRotate90CcwInLodParent = function() {
  return jspb.Message.getField(this, -8) != null;
};


/**
 * optional ClampMode texture_clamp_mode = 5;
 * @return {!proto.keyhole.DioramaDataPacket.ClampMode}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getTextureClampMode = function() {
  return /** @type {!proto.keyhole.DioramaDataPacket.ClampMode} */ (jspb.Message.getFieldWithDefault(this, -11, 1));
};


/** @param {!proto.keyhole.DioramaDataPacket.ClampMode} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setTextureClampMode = function(value) {
  jspb.Message.setField(this, -11, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearTextureClampMode = function() {
  jspb.Message.setField(this, -11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasTextureClampMode = function() {
  return jspb.Message.getField(this, -11) != null;
};


/**
 * optional bytes bounding_box = 6;
 * @return {string}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getBoundingBox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, -10, ""));
};


/**
 * optional bytes bounding_box = 6;
 * This is a type-conversion wrapper around `getBoundingBox()`
 * @return {string}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getBoundingBox_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBoundingBox()));
};


/**
 * optional bytes bounding_box = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBoundingBox()`
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getBoundingBox_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBoundingBox()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setBoundingBox = function(value) {
  jspb.Message.setField(this, -10, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearBoundingBox = function() {
  jspb.Message.setField(this, -10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, -10) != null;
};


/**
 * repeated int32 use_texture_object_id = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getUseTextureObjectIdList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, -9));
};


/** @param {!Array.<number>} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setUseTextureObjectIdList = function(value) {
  jspb.Message.setField(this, -9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.addUseTextureObjectId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, -9, value, opt_index);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearUseTextureObjectIdList = function() {
  this.setUseTextureObjectIdList([]);
};


/**
 * repeated fixed64 lod_child_tile = 21;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getLodChildTileList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<number>} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setLodChildTileList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.addLodChildTile = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearLodChildTileList = function() {
  this.setLodChildTileList([]);
};


/**
 * optional double relative_altitude_anchor_lat = 9;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getRelativeAltitudeAnchorLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, -7, 0.0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setRelativeAltitudeAnchorLat = function(value) {
  jspb.Message.setField(this, -7, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearRelativeAltitudeAnchorLat = function() {
  jspb.Message.setField(this, -7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasRelativeAltitudeAnchorLat = function() {
  return jspb.Message.getField(this, -7) != null;
};


/**
 * optional double relative_altitude_anchor_lng = 10;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getRelativeAltitudeAnchorLng = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, -6, 0.0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setRelativeAltitudeAnchorLng = function(value) {
  jspb.Message.setField(this, -6, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearRelativeAltitudeAnchorLng = function() {
  jspb.Message.setField(this, -6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasRelativeAltitudeAnchorLng = function() {
  return jspb.Message.getField(this, -6) != null;
};


/**
 * optional float relative_altitude_anchor_elevation = 19;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getRelativeAltitudeAnchorElevation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setRelativeAltitudeAnchorElevation = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearRelativeAltitudeAnchorElevation = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasRelativeAltitudeAnchorElevation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AltitudeMode altitude_mode = 18;
 * @return {!proto.keyhole.DioramaDataPacket.AltitudeMode}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getAltitudeMode = function() {
  return /** @type {!proto.keyhole.DioramaDataPacket.AltitudeMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.keyhole.DioramaDataPacket.AltitudeMode} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setAltitudeMode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearAltitudeMode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasAltitudeMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string description_id = 11;
 * @return {string}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getDescriptionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, -5, ""));
};


/** @param {string} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setDescriptionId = function(value) {
  jspb.Message.setField(this, -5, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearDescriptionId = function() {
  jspb.Message.setField(this, -5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasDescriptionId = function() {
  return jspb.Message.getField(this, -5) != null;
};


/**
 * optional bool building_has_info_bubble = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getBuildingHasInfoBubble = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, true));
};


/** @param {boolean} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setBuildingHasInfoBubble = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearBuildingHasInfoBubble = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasBuildingHasInfoBubble = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional fixed64 previous_chunk_path = 12;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getPreviousChunkPath = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -4, 0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setPreviousChunkPath = function(value) {
  jspb.Message.setField(this, -4, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearPreviousChunkPath = function() {
  jspb.Message.setField(this, -4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasPreviousChunkPath = function() {
  return jspb.Message.getField(this, -4) != null;
};


/**
 * optional int32 previous_chunk_channel = 13;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getPreviousChunkChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -3, 0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setPreviousChunkChannel = function(value) {
  jspb.Message.setField(this, -3, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearPreviousChunkChannel = function() {
  jspb.Message.setField(this, -3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasPreviousChunkChannel = function() {
  return jspb.Message.getField(this, -3) != null;
};


/**
 * optional int32 previous_chunk_object = 14;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getPreviousChunkObject = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -2, 0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setPreviousChunkObject = function(value) {
  jspb.Message.setField(this, -2, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearPreviousChunkObject = function() {
  jspb.Message.setField(this, -2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasPreviousChunkObject = function() {
  return jspb.Message.getField(this, -2) != null;
};


/**
 * optional int32 reduce_resolution_levels = 15;
 * @return {number}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getReduceResolutionLevels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, -1, 0));
};


/** @param {number} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setReduceResolutionLevels = function(value) {
  jspb.Message.setField(this, -1, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearReduceResolutionLevels = function() {
  jspb.Message.setField(this, -1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasReduceResolutionLevels = function() {
  return jspb.Message.getField(this, -1) != null;
};


/**
 * optional bytes concatenated_data = 16;
 * @return {string}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getConcatenatedData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 0, ""));
};


/**
 * optional bytes concatenated_data = 16;
 * This is a type-conversion wrapper around `getConcatenatedData()`
 * @return {string}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getConcatenatedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConcatenatedData()));
};


/**
 * optional bytes concatenated_data = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConcatenatedData()`
 * @return {!Uint8Array}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getConcatenatedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConcatenatedData()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setConcatenatedData = function(value) {
  jspb.Message.setField(this, 0, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearConcatenatedData = function() {
  jspb.Message.setField(this, 0, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasConcatenatedData = function() {
  return jspb.Message.getField(this, 0) != null;
};


/**
 * optional bool has_next_chunk = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.getHasNextChunk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.keyhole.DioramaDataPacket.Objects.prototype.setHasNextChunk = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.DioramaDataPacket.Objects.prototype.clearHasNextChunk = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.DioramaDataPacket.Objects.prototype.hasHasNextChunk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated group Objects = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.DioramaDataPacket.Objects>}
 */
proto.keyhole.DioramaDataPacket.prototype.getObjectsList = function() {
  return /** @type{!Array.<!proto.keyhole.DioramaDataPacket.Objects>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.DioramaDataPacket.Objects, 16));
};


/** @param {!Array.<!proto.keyhole.DioramaDataPacket.Objects>} value */
proto.keyhole.DioramaDataPacket.prototype.setObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.keyhole.DioramaDataPacket.Objects=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.DioramaDataPacket.Objects}
 */
proto.keyhole.DioramaDataPacket.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.keyhole.DioramaDataPacket.Objects, opt_index);
};


proto.keyhole.DioramaDataPacket.prototype.clearObjectsList = function() {
  this.setObjectsList([]);
};


