/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.dbroot.StyleAttributeProto');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.keyhole.dbroot.DrawFlagProto');
goog.require('proto.keyhole.dbroot.PopUpProto');
goog.require('proto.keyhole.dbroot.StringIdOrValueProto');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.dbroot.StyleAttributeProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.dbroot.StyleAttributeProto.repeatedFields_, null);
};
goog.inherits(proto.keyhole.dbroot.StyleAttributeProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.dbroot.StyleAttributeProto.displayName = 'proto.keyhole.dbroot.StyleAttributeProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.dbroot.StyleAttributeProto.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.dbroot.StyleAttributeProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.dbroot.StyleAttributeProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.dbroot.StyleAttributeProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    styleId: jspb.Message.getField(msg, 1),
    providerId: jspb.Message.getField(msg, 3),
    polyColorAbgr: jspb.Message.getFieldWithDefault(msg, 4, -1),
    lineColorAbgr: jspb.Message.getFieldWithDefault(msg, 5, -1),
    lineWidth: +jspb.Message.getFieldWithDefault(msg, 6, 1.0),
    labelColorAbgr: jspb.Message.getFieldWithDefault(msg, 7, -1),
    labelScale: +jspb.Message.getFieldWithDefault(msg, 8, 1.0),
    placemarkIconColorAbgr: jspb.Message.getFieldWithDefault(msg, 9, -1),
    placemarkIconScale: +jspb.Message.getFieldWithDefault(msg, 10, 1.0),
    placemarkIconPath: (f = msg.getPlacemarkIconPath()) && proto.keyhole.dbroot.StringIdOrValueProto.toObject(includeInstance, f),
    placemarkIconX: jspb.Message.getFieldWithDefault(msg, 12, 0),
    placemarkIconY: jspb.Message.getFieldWithDefault(msg, 13, 0),
    placemarkIconWidth: jspb.Message.getFieldWithDefault(msg, 14, 32),
    placemarkIconHeight: jspb.Message.getFieldWithDefault(msg, 15, 32),
    popUp: (f = msg.getPopUp()) && proto.keyhole.dbroot.PopUpProto.toObject(includeInstance, f),
    drawFlagList: jspb.Message.toObjectList(msg.getDrawFlagList(),
    proto.keyhole.dbroot.DrawFlagProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.dbroot.StyleAttributeProto}
 */
proto.keyhole.dbroot.StyleAttributeProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.dbroot.StyleAttributeProto;
  return proto.keyhole.dbroot.StyleAttributeProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.dbroot.StyleAttributeProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.dbroot.StyleAttributeProto}
 */
proto.keyhole.dbroot.StyleAttributeProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStyleId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProviderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPolyColorAbgr(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLineColorAbgr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLineWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setLabelColorAbgr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLabelScale(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPlacemarkIconColorAbgr(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPlacemarkIconScale(value);
      break;
    case 11:
      var value = new proto.keyhole.dbroot.StringIdOrValueProto;
      reader.readMessage(value,proto.keyhole.dbroot.StringIdOrValueProto.deserializeBinaryFromReader);
      msg.setPlacemarkIconPath(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlacemarkIconX(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlacemarkIconY(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlacemarkIconWidth(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlacemarkIconHeight(value);
      break;
    case 16:
      var value = new proto.keyhole.dbroot.PopUpProto;
      reader.readMessage(value,proto.keyhole.dbroot.PopUpProto.deserializeBinaryFromReader);
      msg.setPopUp(value);
      break;
    case 17:
      var value = new proto.keyhole.dbroot.DrawFlagProto;
      reader.readMessage(value,proto.keyhole.dbroot.DrawFlagProto.deserializeBinaryFromReader);
      msg.addDrawFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.dbroot.StyleAttributeProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.dbroot.StyleAttributeProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.dbroot.StyleAttributeProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getPlacemarkIconPath();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.keyhole.dbroot.StringIdOrValueProto.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getPopUp();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.keyhole.dbroot.PopUpProto.serializeBinaryToWriter
    );
  }
  f = message.getDrawFlagList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.keyhole.dbroot.DrawFlagProto.serializeBinaryToWriter
    );
  }
};


/**
 * required string style_id = 1;
 * @return {string}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getStyleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setStyleId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearStyleId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasStyleId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 provider_id = 3;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getProviderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setProviderId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearProviderId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasProviderId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional fixed32 poly_color_abgr = 4;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPolyColorAbgr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, -1));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPolyColorAbgr = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPolyColorAbgr = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPolyColorAbgr = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional fixed32 line_color_abgr = 5;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getLineColorAbgr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, -1));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setLineColorAbgr = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearLineColorAbgr = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasLineColorAbgr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float line_width = 6;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getLineWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 1.0));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setLineWidth = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearLineWidth = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasLineWidth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional fixed32 label_color_abgr = 7;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getLabelColorAbgr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, -1));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setLabelColorAbgr = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearLabelColorAbgr = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasLabelColorAbgr = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float label_scale = 8;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getLabelScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 1.0));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setLabelScale = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearLabelScale = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasLabelScale = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional fixed32 placemark_icon_color_abgr = 9;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPlacemarkIconColorAbgr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, -1));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPlacemarkIconColorAbgr = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPlacemarkIconColorAbgr = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPlacemarkIconColorAbgr = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float placemark_icon_scale = 10;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPlacemarkIconScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 1.0));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPlacemarkIconScale = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPlacemarkIconScale = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPlacemarkIconScale = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional StringIdOrValueProto placemark_icon_path = 11;
 * @return {?proto.keyhole.dbroot.StringIdOrValueProto}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPlacemarkIconPath = function() {
  return /** @type{?proto.keyhole.dbroot.StringIdOrValueProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.StringIdOrValueProto, 11));
};


/** @param {?proto.keyhole.dbroot.StringIdOrValueProto|undefined} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPlacemarkIconPath = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPlacemarkIconPath = function() {
  this.setPlacemarkIconPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPlacemarkIconPath = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 placemark_icon_x = 12;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPlacemarkIconX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPlacemarkIconX = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPlacemarkIconX = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPlacemarkIconX = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 placemark_icon_y = 13;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPlacemarkIconY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPlacemarkIconY = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPlacemarkIconY = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPlacemarkIconY = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 placemark_icon_width = 14;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPlacemarkIconWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 32));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPlacemarkIconWidth = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPlacemarkIconWidth = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPlacemarkIconWidth = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 placemark_icon_height = 15;
 * @return {number}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPlacemarkIconHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 32));
};


/** @param {number} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPlacemarkIconHeight = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPlacemarkIconHeight = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPlacemarkIconHeight = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional PopUpProto pop_up = 16;
 * @return {?proto.keyhole.dbroot.PopUpProto}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getPopUp = function() {
  return /** @type{?proto.keyhole.dbroot.PopUpProto} */ (
    jspb.Message.getWrapperField(this, proto.keyhole.dbroot.PopUpProto, 16));
};


/** @param {?proto.keyhole.dbroot.PopUpProto|undefined} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setPopUp = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearPopUp = function() {
  this.setPopUp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.hasPopUp = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated DrawFlagProto draw_flag = 17;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.dbroot.DrawFlagProto>}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.getDrawFlagList = function() {
  return /** @type{!Array.<!proto.keyhole.dbroot.DrawFlagProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.dbroot.DrawFlagProto, 17));
};


/** @param {!Array.<!proto.keyhole.dbroot.DrawFlagProto>} value */
proto.keyhole.dbroot.StyleAttributeProto.prototype.setDrawFlagList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.keyhole.dbroot.DrawFlagProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.dbroot.DrawFlagProto}
 */
proto.keyhole.dbroot.StyleAttributeProto.prototype.addDrawFlag = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.keyhole.dbroot.DrawFlagProto, opt_index);
};


proto.keyhole.dbroot.StyleAttributeProto.prototype.clearDrawFlagList = function() {
  this.setDrawFlagList([]);
};


