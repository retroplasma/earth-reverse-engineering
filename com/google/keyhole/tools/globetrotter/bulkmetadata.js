/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.geo_globetrotter_proto_rocktree.BulkMetadata');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('proto.geo_globetrotter_proto_rocktree.NodeKey');
goog.require('proto.geo_globetrotter_proto_rocktree.NodeMetadata');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geo_globetrotter_proto_rocktree.BulkMetadata.repeatedFields_, null);
};
goog.inherits(proto.geo_globetrotter_proto_rocktree.BulkMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo_globetrotter_proto_rocktree.BulkMetadata.displayName = 'proto.geo_globetrotter_proto_rocktree.BulkMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.geo_globetrotter_proto_rocktree.BulkMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo_globetrotter_proto_rocktree.BulkMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeMetadataList: jspb.Message.toObjectList(msg.getNodeMetadataList(),
    proto.geo_globetrotter_proto_rocktree.NodeMetadata.toObject, includeInstance),
    headNodeKey: (f = msg.getHeadNodeKey()) && proto.geo_globetrotter_proto_rocktree.NodeKey.toObject(includeInstance, f),
    headNodeCenterList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    metersPerTexelList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    defaultImageryEpoch: jspb.Message.getField(msg, 5),
    defaultAvailableTextureFormats: jspb.Message.getField(msg, 6),
    defaultAvailableViewDependentTextures: jspb.Message.getField(msg, 7),
    defaultAvailableViewDependentTextureFormats: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo_globetrotter_proto_rocktree.BulkMetadata}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo_globetrotter_proto_rocktree.BulkMetadata;
  return proto.geo_globetrotter_proto_rocktree.BulkMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo_globetrotter_proto_rocktree.BulkMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo_globetrotter_proto_rocktree.BulkMetadata}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.geo_globetrotter_proto_rocktree.NodeMetadata;
      reader.readMessage(value,proto.geo_globetrotter_proto_rocktree.NodeMetadata.deserializeBinaryFromReader);
      msg.addNodeMetadata(value);
      break;
    case 2:
      var value = new proto.geo_globetrotter_proto_rocktree.NodeKey;
      reader.readMessage(value,proto.geo_globetrotter_proto_rocktree.NodeKey.deserializeBinaryFromReader);
      msg.setHeadNodeKey(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setHeadNodeCenterList(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setMetersPerTexelList(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultImageryEpoch(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultAvailableTextureFormats(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultAvailableViewDependentTextures(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultAvailableViewDependentTextureFormats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo_globetrotter_proto_rocktree.BulkMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo_globetrotter_proto_rocktree.BulkMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.geo_globetrotter_proto_rocktree.NodeMetadata.serializeBinaryToWriter
    );
  }
  f = message.getHeadNodeKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.geo_globetrotter_proto_rocktree.NodeKey.serializeBinaryToWriter
    );
  }
  f = message.getHeadNodeCenterList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getMetersPerTexelList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * repeated NodeMetadata node_metadata = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.geo_globetrotter_proto_rocktree.NodeMetadata>}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getNodeMetadataList = function() {
  return /** @type{!Array.<!proto.geo_globetrotter_proto_rocktree.NodeMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.geo_globetrotter_proto_rocktree.NodeMetadata, 1));
};


/** @param {!Array.<!proto.geo_globetrotter_proto_rocktree.NodeMetadata>} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setNodeMetadataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.geo_globetrotter_proto_rocktree.NodeMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.geo_globetrotter_proto_rocktree.NodeMetadata}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.addNodeMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.geo_globetrotter_proto_rocktree.NodeMetadata, opt_index);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearNodeMetadataList = function() {
  this.setNodeMetadataList([]);
};


/**
 * optional NodeKey head_node_key = 2;
 * @return {?proto.geo_globetrotter_proto_rocktree.NodeKey}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getHeadNodeKey = function() {
  return /** @type{?proto.geo_globetrotter_proto_rocktree.NodeKey} */ (
    jspb.Message.getWrapperField(this, proto.geo_globetrotter_proto_rocktree.NodeKey, 2));
};


/** @param {?proto.geo_globetrotter_proto_rocktree.NodeKey|undefined} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setHeadNodeKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearHeadNodeKey = function() {
  this.setHeadNodeKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.hasHeadNodeKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated double head_node_center = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getHeadNodeCenterList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array.<number>} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setHeadNodeCenterList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.addHeadNodeCenter = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearHeadNodeCenterList = function() {
  this.setHeadNodeCenterList([]);
};


/**
 * repeated float meters_per_texel = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getMetersPerTexelList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array.<number>} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setMetersPerTexelList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.addMetersPerTexel = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearMetersPerTexelList = function() {
  this.setMetersPerTexelList([]);
};


/**
 * optional uint32 default_imagery_epoch = 5;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getDefaultImageryEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setDefaultImageryEpoch = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearDefaultImageryEpoch = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.hasDefaultImageryEpoch = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 default_available_texture_formats = 6;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getDefaultAvailableTextureFormats = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setDefaultAvailableTextureFormats = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearDefaultAvailableTextureFormats = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.hasDefaultAvailableTextureFormats = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 default_available_view_dependent_textures = 7;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getDefaultAvailableViewDependentTextures = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setDefaultAvailableViewDependentTextures = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearDefaultAvailableViewDependentTextures = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.hasDefaultAvailableViewDependentTextures = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 default_available_view_dependent_texture_formats = 8;
 * @return {number}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.getDefaultAvailableViewDependentTextureFormats = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.setDefaultAvailableViewDependentTextureFormats = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.clearDefaultAvailableViewDependentTextureFormats = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo_globetrotter_proto_rocktree.BulkMetadata.prototype.hasDefaultAvailableViewDependentTextureFormats = function() {
  return jspb.Message.getField(this, 8) != null;
};


