/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.WaterSurfaceTileProto');
goog.provide('proto.keyhole.WaterSurfaceTileProto.Mesh');
goog.provide('proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints');
goog.provide('proto.keyhole.WaterSurfaceTileProto.Mesh.Strips');
goog.provide('proto.keyhole.WaterSurfaceTileProto.TileType');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.WaterSurfaceTileProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.WaterSurfaceTileProto.repeatedFields_, null);
};
goog.inherits(proto.keyhole.WaterSurfaceTileProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.WaterSurfaceTileProto.displayName = 'proto.keyhole.WaterSurfaceTileProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.WaterSurfaceTileProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.WaterSurfaceTileProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.WaterSurfaceTileProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    tileType: jspb.Message.getFieldWithDefault(msg, 1, 1),
    meshList: jspb.Message.toObjectList(msg.getMeshList(),
    proto.keyhole.WaterSurfaceTileProto.Mesh.toObject, includeInstance),
    terrainVertexIsUnderwater: msg.getTerrainVertexIsUnderwater_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.WaterSurfaceTileProto}
 */
proto.keyhole.WaterSurfaceTileProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.WaterSurfaceTileProto;
  return proto.keyhole.WaterSurfaceTileProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.WaterSurfaceTileProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.WaterSurfaceTileProto}
 */
proto.keyhole.WaterSurfaceTileProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.keyhole.WaterSurfaceTileProto.TileType} */ (reader.readEnum());
      msg.setTileType(value);
      break;
    case 2:
      var value = new proto.keyhole.WaterSurfaceTileProto.Mesh;
      reader.readGroup(2, value,proto.keyhole.WaterSurfaceTileProto.Mesh.deserializeBinaryFromReader);
      msg.addMesh(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTerrainVertexIsUnderwater(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.WaterSurfaceTileProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.WaterSurfaceTileProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.WaterSurfaceTileProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.keyhole.WaterSurfaceTileProto.TileType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMeshList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      2,
      f,
      proto.keyhole.WaterSurfaceTileProto.Mesh.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.keyhole.WaterSurfaceTileProto.TileType = {
  ALL_LAND: 1,
  ALL_WATER: 2,
  COAST: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.WaterSurfaceTileProto.Mesh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.WaterSurfaceTileProto.Mesh.repeatedFields_, null);
};
goog.inherits(proto.keyhole.WaterSurfaceTileProto.Mesh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.WaterSurfaceTileProto.Mesh.displayName = 'proto.keyhole.WaterSurfaceTileProto.Mesh';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.repeatedFields_ = [5,6,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.WaterSurfaceTileProto.Mesh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.toObject = function(includeInstance, msg) {
  var f, obj = {
    altitudeCm: jspb.Message.getField(msg, 1),
    x: msg.getX_asB64(),
    y: msg.getY_asB64(),
    alpha: msg.getAlpha_asB64(),
    triangleVerticesList: jspb.Message.getField(msg, 5),
    stripsList: jspb.Message.toObjectList(msg.getStripsList(),
    proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.toObject, includeInstance),
    additionalEdgePointsList: jspb.Message.toObjectList(msg.getAdditionalEdgePointsList(),
    proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.WaterSurfaceTileProto.Mesh;
  return proto.keyhole.WaterSurfaceTileProto.Mesh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAltitudeCm(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setY(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlpha(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addTriangleVertices(value);
      break;
    case 8:
      var value = new proto.keyhole.WaterSurfaceTileProto.Mesh.Strips;
      reader.readGroup(8, value,proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.deserializeBinaryFromReader);
      msg.addStrips(value);
      break;
    case 10:
      var value = new proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints;
      reader.readGroup(10, value,proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.deserializeBinaryFromReader);
      msg.addAdditionalEdgePoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.WaterSurfaceTileProto.Mesh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTriangleVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
  f = message.getStripsList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      8,
      f,
      proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.serializeBinaryToWriter
    );
  }
  f = message.getAdditionalEdgePointsList();
  if (f.length > 0) {
    writer.writeRepeatedGroup(
      10,
      f,
      proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.repeatedFields_, null);
};
goog.inherits(proto.keyhole.WaterSurfaceTileProto.Mesh.Strips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.displayName = 'proto.keyhole.WaterSurfaceTileProto.Mesh.Strips';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.toObject = function(includeInstance, msg) {
  var f, obj = {
    verticesList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.WaterSurfaceTileProto.Mesh.Strips;
  return proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addVertices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      9,
      f
    );
  }
};


/**
 * repeated int32 vertices = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.prototype.getVerticesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.prototype.setVerticesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.prototype.addVertices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.Strips.prototype.clearVerticesList = function() {
  this.setVerticesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.displayName = 'proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.toObject = function(includeInstance, msg) {
  var f, obj = {
    coordinate: msg.getCoordinate_asB64(),
    alpha: msg.getAlpha_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints;
  return proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCoordinate(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlpha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional bytes coordinate = 11;
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.getCoordinate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes coordinate = 11;
 * This is a type-conversion wrapper around `getCoordinate()`
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.getCoordinate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCoordinate()));
};


/**
 * optional bytes coordinate = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCoordinate()`
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.getCoordinate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCoordinate()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.setCoordinate = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.clearCoordinate = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.hasCoordinate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes alpha = 12;
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.getAlpha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes alpha = 12;
 * This is a type-conversion wrapper around `getAlpha()`
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.getAlpha_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlpha()));
};


/**
 * optional bytes alpha = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlpha()`
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.getAlpha_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlpha()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.setAlpha = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.clearAlpha = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 altitude_cm = 3;
 * @return {number}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getAltitudeCm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.setAltitudeCm = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.clearAltitudeCm = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.hasAltitudeCm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes x = 4;
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getX = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes x = 4;
 * This is a type-conversion wrapper around `getX()`
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getX_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getX()));
};


/**
 * optional bytes x = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getX()`
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getX_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getX()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.clearX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes y = 5;
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getY = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes y = 5;
 * This is a type-conversion wrapper around `getY()`
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getY_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getY()));
};


/**
 * optional bytes y = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getY()`
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getY_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getY()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.clearY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes alpha = 6;
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getAlpha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes alpha = 6;
 * This is a type-conversion wrapper around `getAlpha()`
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getAlpha_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlpha()));
};


/**
 * optional bytes alpha = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlpha()`
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getAlpha_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlpha()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.setAlpha = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.clearAlpha = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 triangle_vertices = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getTriangleVerticesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<number>} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.setTriangleVerticesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.addTriangleVertices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.clearTriangleVerticesList = function() {
  this.setTriangleVerticesList([]);
};


/**
 * repeated group Strips = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips>}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getStripsList = function() {
  return /** @type{!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.WaterSurfaceTileProto.Mesh.Strips, 6));
};


/** @param {!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips>} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.setStripsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh.Strips}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.addStrips = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.keyhole.WaterSurfaceTileProto.Mesh.Strips, opt_index);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.clearStripsList = function() {
  this.setStripsList([]);
};


/**
 * repeated group AdditionalEdgePoints = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints>}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.getAdditionalEdgePointsList = function() {
  return /** @type{!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints, 8));
};


/** @param {!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints>} value */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.setAdditionalEdgePointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints}
 */
proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.addAdditionalEdgePoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.keyhole.WaterSurfaceTileProto.Mesh.AdditionalEdgePoints, opt_index);
};


proto.keyhole.WaterSurfaceTileProto.Mesh.prototype.clearAdditionalEdgePointsList = function() {
  this.setAdditionalEdgePointsList([]);
};


/**
 * optional TileType tile_type = 1;
 * @return {!proto.keyhole.WaterSurfaceTileProto.TileType}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.getTileType = function() {
  return /** @type {!proto.keyhole.WaterSurfaceTileProto.TileType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.keyhole.WaterSurfaceTileProto.TileType} value */
proto.keyhole.WaterSurfaceTileProto.prototype.setTileType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.WaterSurfaceTileProto.prototype.clearTileType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.hasTileType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated group Mesh = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh>}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.getMeshList = function() {
  return /** @type{!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.WaterSurfaceTileProto.Mesh, 2));
};


/** @param {!Array.<!proto.keyhole.WaterSurfaceTileProto.Mesh>} value */
proto.keyhole.WaterSurfaceTileProto.prototype.setMeshList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.keyhole.WaterSurfaceTileProto.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.WaterSurfaceTileProto.Mesh}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.addMesh = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.keyhole.WaterSurfaceTileProto.Mesh, opt_index);
};


proto.keyhole.WaterSurfaceTileProto.prototype.clearMeshList = function() {
  this.setMeshList([]);
};


/**
 * optional bytes terrain_vertex_is_underwater = 13;
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.getTerrainVertexIsUnderwater = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes terrain_vertex_is_underwater = 13;
 * This is a type-conversion wrapper around `getTerrainVertexIsUnderwater()`
 * @return {string}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.getTerrainVertexIsUnderwater_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTerrainVertexIsUnderwater()));
};


/**
 * optional bytes terrain_vertex_is_underwater = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTerrainVertexIsUnderwater()`
 * @return {!Uint8Array}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.getTerrainVertexIsUnderwater_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTerrainVertexIsUnderwater()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyhole.WaterSurfaceTileProto.prototype.setTerrainVertexIsUnderwater = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.keyhole.WaterSurfaceTileProto.prototype.clearTerrainVertexIsUnderwater = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.WaterSurfaceTileProto.prototype.hasTerrainVertexIsUnderwater = function() {
  return jspb.Message.getField(this, 13) != null;
};


