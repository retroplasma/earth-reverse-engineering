/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.keyhole.replica.ReplicaInstanceSet');
goog.provide('proto.keyhole.replica.ReplicaInstanceSet.Instance');
goog.provide('proto.keyhole.replica.ReplicaInstanceSet.Model');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.replica.ReplicaInstanceSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.keyhole.replica.ReplicaInstanceSet.repeatedFields_, null);
};
goog.inherits(proto.keyhole.replica.ReplicaInstanceSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.replica.ReplicaInstanceSet.displayName = 'proto.keyhole.replica.ReplicaInstanceSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.keyhole.replica.ReplicaInstanceSet.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.replica.ReplicaInstanceSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.replica.ReplicaInstanceSet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.replica.ReplicaInstanceSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getField(msg, 1),
    modelsList: jspb.Message.toObjectList(msg.getModelsList(),
    proto.keyhole.replica.ReplicaInstanceSet.Model.toObject, includeInstance),
    instancesList: jspb.Message.toObjectList(msg.getInstancesList(),
    proto.keyhole.replica.ReplicaInstanceSet.Instance.toObject, includeInstance),
    distanceBetweenInstancesCm: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.replica.ReplicaInstanceSet}
 */
proto.keyhole.replica.ReplicaInstanceSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.replica.ReplicaInstanceSet;
  return proto.keyhole.replica.ReplicaInstanceSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.replica.ReplicaInstanceSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.replica.ReplicaInstanceSet}
 */
proto.keyhole.replica.ReplicaInstanceSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = new proto.keyhole.replica.ReplicaInstanceSet.Model;
      reader.readMessage(value,proto.keyhole.replica.ReplicaInstanceSet.Model.deserializeBinaryFromReader);
      msg.addModels(value);
      break;
    case 3:
      var value = new proto.keyhole.replica.ReplicaInstanceSet.Instance;
      reader.readMessage(value,proto.keyhole.replica.ReplicaInstanceSet.Instance.deserializeBinaryFromReader);
      msg.addInstances(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistanceBetweenInstancesCm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.replica.ReplicaInstanceSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.replica.ReplicaInstanceSet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.replica.ReplicaInstanceSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.keyhole.replica.ReplicaInstanceSet.Model.serializeBinaryToWriter
    );
  }
  f = message.getInstancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.keyhole.replica.ReplicaInstanceSet.Instance.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.replica.ReplicaInstanceSet.Model = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.replica.ReplicaInstanceSet.Model, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.replica.ReplicaInstanceSet.Model.displayName = 'proto.keyhole.replica.ReplicaInstanceSet.Model';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.replica.ReplicaInstanceSet.Model.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Model} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelIndex: jspb.Message.getField(msg, 1),
    numInstances: jspb.Message.getField(msg, 2),
    isRelativeToSurface: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.replica.ReplicaInstanceSet.Model}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.replica.ReplicaInstanceSet.Model;
  return proto.keyhole.replica.ReplicaInstanceSet.Model.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Model} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.replica.ReplicaInstanceSet.Model}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModelIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumInstances(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRelativeToSurface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.replica.ReplicaInstanceSet.Model.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Model} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required int32 model_index = 1;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.getModelIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.setModelIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.clearModelIndex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.hasModelIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 num_instances = 2;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.getNumInstances = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.setNumInstances = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.clearNumInstances = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.hasNumInstances = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_relative_to_surface = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.getIsRelativeToSurface = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.setIsRelativeToSurface = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.clearIsRelativeToSurface = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Model.prototype.hasIsRelativeToSurface = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyhole.replica.ReplicaInstanceSet.Instance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyhole.replica.ReplicaInstanceSet.Instance.displayName = 'proto.keyhole.replica.ReplicaInstanceSet.Instance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.toObject = function(opt_includeInstance) {
  return proto.keyhole.replica.ReplicaInstanceSet.Instance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Instance} msg The msg instance to transform.
 * @return {!Object}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    z: jspb.Message.getField(msg, 3),
    scale: jspb.Message.getFieldWithDefault(msg, 4, 100),
    zRotation: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyhole.replica.ReplicaInstanceSet.Instance}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyhole.replica.ReplicaInstanceSet.Instance;
  return proto.keyhole.replica.ReplicaInstanceSet.Instance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Instance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyhole.replica.ReplicaInstanceSet.Instance}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScale(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyhole.replica.ReplicaInstanceSet.Instance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Instance} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required sint32 x = 1;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 y = 2;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 z = 3;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.setZ = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.clearZ = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 scale = 4;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 100));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.setScale = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.clearScale = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.hasScale = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 z_rotation = 5;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.getZRotation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.setZRotation = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.clearZRotation = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.Instance.prototype.hasZRotation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string collection_name = 1;
 * @return {string}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.keyhole.replica.ReplicaInstanceSet.prototype.setCollectionName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.keyhole.replica.ReplicaInstanceSet.prototype.clearCollectionName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.hasCollectionName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Model models = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.replica.ReplicaInstanceSet.Model>}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.getModelsList = function() {
  return /** @type{!Array.<!proto.keyhole.replica.ReplicaInstanceSet.Model>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.replica.ReplicaInstanceSet.Model, 2));
};


/** @param {!Array.<!proto.keyhole.replica.ReplicaInstanceSet.Model>} value */
proto.keyhole.replica.ReplicaInstanceSet.prototype.setModelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Model=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.replica.ReplicaInstanceSet.Model}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.addModels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.keyhole.replica.ReplicaInstanceSet.Model, opt_index);
};


proto.keyhole.replica.ReplicaInstanceSet.prototype.clearModelsList = function() {
  this.setModelsList([]);
};


/**
 * repeated Instance instances = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.keyhole.replica.ReplicaInstanceSet.Instance>}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.getInstancesList = function() {
  return /** @type{!Array.<!proto.keyhole.replica.ReplicaInstanceSet.Instance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.keyhole.replica.ReplicaInstanceSet.Instance, 3));
};


/** @param {!Array.<!proto.keyhole.replica.ReplicaInstanceSet.Instance>} value */
proto.keyhole.replica.ReplicaInstanceSet.prototype.setInstancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.keyhole.replica.ReplicaInstanceSet.Instance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.keyhole.replica.ReplicaInstanceSet.Instance}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.addInstances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.keyhole.replica.ReplicaInstanceSet.Instance, opt_index);
};


proto.keyhole.replica.ReplicaInstanceSet.prototype.clearInstancesList = function() {
  this.setInstancesList([]);
};


/**
 * optional int32 distance_between_instances_cm = 4;
 * @return {number}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.getDistanceBetweenInstancesCm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.keyhole.replica.ReplicaInstanceSet.prototype.setDistanceBetweenInstancesCm = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.keyhole.replica.ReplicaInstanceSet.prototype.clearDistanceBetweenInstancesCm = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyhole.replica.ReplicaInstanceSet.prototype.hasDistanceBetweenInstancesCm = function() {
  return jspb.Message.getField(this, 4) != null;
};


